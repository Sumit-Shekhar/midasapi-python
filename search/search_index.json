{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"This module provides a Python interface to interact with the MIDAS Civil NX API using HTTP requests. It includes functionality to manage the MAPI key required for authentication and to send API requests using various HTTP methods. Installation Make sure you have Python 3 installed. Install the MIDAS Python interface via Pip command. pip install midasapi Additional libraries required by the modules are Numpy Polars xlsxwriter Requests To import the package use the import * from midasapi import * Functions available MAPI_KEY Handles and stores the MIDAS API key used for authenticating requests. #Importing the midasapi package from midasapi import * #Sets the MAPI Key for Python interface MAPI_KEY ( 'eyJ1ciI6InN1bWl0QG1pZGFzaXQuY29tIiwicGciO.252a81571d' ) NOTE : Ensure your MIDAS Civil NX application is open and connected. The MAPI key used in your Python script must match the key in the Civil NX application. midasAPI Send requests to MIDAS Civil NX. Parameters : method (str) : HTTP method (\"GET\", \"POST\", \"PUT\", \"DELETE\") command (str) : API endpoint (e.g., \"/db/NODE\") body (dict) : Request payload (JSON format). Optional for \"GET\" and \"DELETE\" Returns : A dict representing the JSON response from the API. Example : #Importing the midasapi package from midasapi import * #Sets the MAPI Key for Python interface MAPI_KEY ( 'eyJ1ciI6InN1bWl0QG1pZGFzaXQuY29tIiwicGciO252a81571d' ) # Create a node MidasAPI ( \"PUT\" , \"/db/NODE\" ,{{ \"Assign\" :{{ \"1\" :{{ 'X' : 0 , 'Y' : 0 , 'Z' : 0 }}}}}}) getID Return ID of objects(Node,Element,Section,Material) Parameters : *objects (list) : Objects or List of Objects of type Node, Element, Section and Material \u2b50 Supports nested list Returns : An array with ID of inputted objects Example : from midasapi import * MAPI_KEY ( 'eyJ1ciI6InN1bWl0QG1pZGFzaXQuY29tIiwicGciO252a81571d' ) Node ( 0 , 0 , 0 , id = 1 ) # Create Node at 0,0,0 with ID = 1 Node ( 1 , 1 , 1 , id = 2 ) # Create Node at 1,1,1 with ID = 2 Node ( 2 , 2 , 2 , id = 3 ) # Create Node at 2,2,2 with ID = 3 beam_1 = Element . Beam ( 1 , 2 ) # Create Beam connecting Node 1 and Node 2 (default ID = 1) beam_2 = Element . Beam ( 2 , 3 ) # Create Beam connecting Node 2 and Node 3 (default ID = 2) print ( getID ( beam_1 )) print ( getID ( beam_2 )) print ( getID ( beam_1 , beam_2 )) # Output : # [1] # [2] # [1, 2] getNodeID Return Node ID of Element objects Parameters : *objects (list) : Objects or List of Objects of type Element(Beam, Truss...) \u2b50 Supports nested list Returns : An array with Node IDs of inputted objects Example : from midasapi import * MAPI_KEY ( 'eyJ1ciI6InN1bWl0QG1pZGFzaXQuY29tIiwicGciO252a81571d' ) Node ( 0 , 0 , 0 , id = 1 ) # Create Node at 0,0,0 with ID = 1 Node ( 1 , 1 , 1 , id = 2 ) # Create Node at 1,1,1 with ID = 2 Node ( 2 , 2 , 2 , id = 3 ) # Create Node at 2,2,2 with ID = 3 beam_1 = Element . Beam ( 1 , 2 ) # Create Beam connecting Node 1 and Node 2 (default ID = 1) beam_2 = Element . Beam ( 2 , 3 ) # Create Beam connecting Node 2 and Node 3 (default ID = 2) print ( getNodeID ( beam_1 )) print ( getNodeID ( beam_2 )) print ( getNodeID ( beam_1 , beam_2 )) # Output : # [[1, 2]] # [[2, 3]] # [[1, 2], [2, 3]]","title":"Introduction"},{"location":"#installation","text":"Make sure you have Python 3 installed. Install the MIDAS Python interface via Pip command. pip install midasapi Additional libraries required by the modules are Numpy Polars xlsxwriter Requests To import the package use the import * from midasapi import *","title":"Installation"},{"location":"#functions-available","text":"","title":"Functions available"},{"location":"#mapi_key","text":"Handles and stores the MIDAS API key used for authenticating requests. #Importing the midasapi package from midasapi import * #Sets the MAPI Key for Python interface MAPI_KEY ( 'eyJ1ciI6InN1bWl0QG1pZGFzaXQuY29tIiwicGciO.252a81571d' ) NOTE : Ensure your MIDAS Civil NX application is open and connected. The MAPI key used in your Python script must match the key in the Civil NX application.","title":"MAPI_KEY"},{"location":"#midasapi","text":"Send requests to MIDAS Civil NX.","title":"midasAPI"},{"location":"#parameters","text":"method (str) : HTTP method (\"GET\", \"POST\", \"PUT\", \"DELETE\") command (str) : API endpoint (e.g., \"/db/NODE\") body (dict) : Request payload (JSON format). Optional for \"GET\" and \"DELETE\"","title":"Parameters :"},{"location":"#returns","text":"A dict representing the JSON response from the API.","title":"Returns :"},{"location":"#example","text":"#Importing the midasapi package from midasapi import * #Sets the MAPI Key for Python interface MAPI_KEY ( 'eyJ1ciI6InN1bWl0QG1pZGFzaXQuY29tIiwicGciO252a81571d' ) # Create a node MidasAPI ( \"PUT\" , \"/db/NODE\" ,{{ \"Assign\" :{{ \"1\" :{{ 'X' : 0 , 'Y' : 0 , 'Z' : 0 }}}}}})","title":"Example :"},{"location":"#getid","text":"Return ID of objects(Node,Element,Section,Material)","title":"getID"},{"location":"#parameters_1","text":"*objects (list) : Objects or List of Objects of type Node, Element, Section and Material \u2b50 Supports nested list","title":"Parameters :"},{"location":"#returns_1","text":"An array with ID of inputted objects","title":"Returns :"},{"location":"#example_1","text":"from midasapi import * MAPI_KEY ( 'eyJ1ciI6InN1bWl0QG1pZGFzaXQuY29tIiwicGciO252a81571d' ) Node ( 0 , 0 , 0 , id = 1 ) # Create Node at 0,0,0 with ID = 1 Node ( 1 , 1 , 1 , id = 2 ) # Create Node at 1,1,1 with ID = 2 Node ( 2 , 2 , 2 , id = 3 ) # Create Node at 2,2,2 with ID = 3 beam_1 = Element . Beam ( 1 , 2 ) # Create Beam connecting Node 1 and Node 2 (default ID = 1) beam_2 = Element . Beam ( 2 , 3 ) # Create Beam connecting Node 2 and Node 3 (default ID = 2) print ( getID ( beam_1 )) print ( getID ( beam_2 )) print ( getID ( beam_1 , beam_2 )) # Output : # [1] # [2] # [1, 2]","title":"Example :"},{"location":"#getnodeid","text":"Return Node ID of Element objects","title":"getNodeID"},{"location":"#parameters_2","text":"*objects (list) : Objects or List of Objects of type Element(Beam, Truss...) \u2b50 Supports nested list","title":"Parameters :"},{"location":"#returns_2","text":"An array with Node IDs of inputted objects","title":"Returns :"},{"location":"#example_2","text":"from midasapi import * MAPI_KEY ( 'eyJ1ciI6InN1bWl0QG1pZGFzaXQuY29tIiwicGciO252a81571d' ) Node ( 0 , 0 , 0 , id = 1 ) # Create Node at 0,0,0 with ID = 1 Node ( 1 , 1 , 1 , id = 2 ) # Create Node at 1,1,1 with ID = 2 Node ( 2 , 2 , 2 , id = 3 ) # Create Node at 2,2,2 with ID = 3 beam_1 = Element . Beam ( 1 , 2 ) # Create Beam connecting Node 1 and Node 2 (default ID = 1) beam_2 = Element . Beam ( 2 , 3 ) # Create Beam connecting Node 2 and Node 3 (default ID = 2) print ( getNodeID ( beam_1 )) print ( getNodeID ( beam_2 )) print ( getNodeID ( beam_1 , beam_2 )) # Output : # [[1, 2]] # [[2, 3]] # [[1, 2], [2, 3]]","title":"Example :"},{"location":"Construction%20Stage/","text":"Construction Stage (CS) The module provides functionality to create, manage, and synchronize construction stages for staged construction analysis in the model. It handles activation and deactivation of structure groups, boundary groups, and load groups across different construction phases. Note. All the codes below assumes the initial import and MAPI Key definition. from midasapi import * MAPI_KEY ( 'eyJ1ciI6InN1bWl0QG1pZGFzaXQuY29tIiwicGciO252k81571d' ) Construction Stage Constructor CS(name, duration=0, s_group=None, s_age=None, s_type=None, b_group=None, b_pos=None, b_type=None, l_group=None, l_day=None, l_type=None, id=None, sr_stage=True, ad_stage=False, load_in=False, nl=5, addstp=None) Creates a construction stage with specified parameters for structure, boundary, and load group management. Parameters name : Name of the construction stage duration (default=0) : Duration of construction stage in days s_group (default=None) : Structure group name or list of group names s_age (default=None) : Age of structure group in days (or redistribution % for deactivation) s_type (default=None) : Structure activation type - \"A\" to activate, \"D\" to deactivate b_group (default=None) : Boundary group name or list of group names b_pos (default=None) : Boundary position type - \"ORIGINAL\" or \"DEFORMED\" b_type (default=None) : Boundary activation type - \"A\" to activate, \"D\" to deactivate l_group (default=None) : Load group name or list of group names l_day (default=None) : Load activation day - \"FIRST\" or \"LAST\" l_type (default=None) : Load activation type - \"A\" to activate, \"D\" to deactivate id (default=None) : Manual construction stage ID assignment (auto-assigned if None) sr_stage (default=True) : Save results of this stage ad_stage (default=False) : Add additional step results load_in (default=False) : Load incremental steps for material nonlinear analysis nl (default=5) : Number of load incremental steps addstp (default=None) : List of additional steps Class Attributes CS.CSA -> List of all construction stages. Examples Single Group Activation #Create Node and Element for j in range ( 6 ): for i in range ( 2 ): Node ( i * 10 , j * 2 , 0 ) Node . create () j = 0 for k in range ( 6 ): for i in range ( 1 , 2 ): Element . Beam ( i + j , i + 1 + j ) Element . create () j = j + 2 # Create structural groups Group . Structure ( \"CS1\" , nlist = [ 1 , 2 ], elist = [ 1 ]) Group . Structure ( \"CS2\" , nlist = [ 3 , 4 , 5 , 6 ], elist = [ 2 , 3 ]) Group . Structure ( \"CS3\" , nlist = [ 7 , 8 , 9 , 10 ], elist = [ 4 , 5 , 6 ]) # Create boundary and load groups Group . Boundary ( \"BG1\" ) Group . Boundary ( \"BG2\" ) Group . Load ( \"Load group 1\" ) Group . Load ( \"Load group 2\" ) Group . create () #Create Stage CS ( \"Stage 1\" , 7 , \"CS1\" , 10 , \"A\" , \"BG1\" , \"DEFORMED\" , \"A\" , \"Load Group 1\" , \"FIRST\" , \"A\" ) CS . create () Multiple Group Activation #Create Node and Element for j in range ( 6 ): for i in range ( 2 ): Node ( i * 10 , j * 2 , 0 ) Node . create () j = 0 for k in range ( 6 ): for i in range ( 1 , 2 ): Element . Beam ( i + j , i + 1 + j ) Element . create () j = j + 2 # Create structural groups Group . Structure ( \"CS1\" , nlist = [ 1 , 2 ], elist = [ 1 ]) Group . Structure ( \"CS2\" , nlist = [ 3 , 4 , 5 , 6 ], elist = [ 2 , 3 ]) Group . Structure ( \"CS3\" , nlist = [ 7 , 8 , 9 , 10 ], elist = [ 4 , 5 , 6 ]) # Create boundary and load groups Group . Boundary ( \"BG1\" ) Group . Boundary ( \"BG2\" ) Group . Load ( \"Load group 1\" ) Group . Load ( \"Load group 2\" ) Group . create () #Create Stage CS ( \"Stage 1\" , 17 ,[ \"CS1\" , \"CS2\" ],[ 10 , 7 ], \"A\" ,[ \"BG1\" , \"BG2\" ],[ \"DEFORMED\" , \"ORIGINAL\" ], \"A\" , \"Load Group 1\" , \"FIRST\" , \"A\" ) CS . create () Mixed Activation and Deactivation #Create Node and Element for j in range ( 6 ): for i in range ( 2 ): Node ( i * 10 , j * 2 , 0 ) Node . create () j = 0 for k in range ( 6 ): for i in range ( 1 , 2 ): Element . Beam ( i + j , i + 1 + j ) Element . create () j = j + 2 # Create structural groups Group . Structure ( \"CS1\" , nlist = [ 1 , 2 ], elist = [ 1 ]) Group . Structure ( \"CS2\" , nlist = [ 3 , 4 , 5 , 6 ], elist = [ 2 , 3 ]) Group . Structure ( \"CS3\" , nlist = [ 7 , 8 , 9 , 10 ], elist = [ 4 , 5 , 6 ]) # Create boundary and load groups Group . Boundary ( \"BG1\" ) Group . Boundary ( \"BG2\" ) Group . Load ( \"Load group 1\" ) Group . Load ( \"Load group 2\" ) Group . create () #Create Stage CS ( \"Stage 1\" , 17 ,[ \"CS1\" , \"CS2\" ],[ 10 , 7 ], \"A\" ,[ \"BG1\" , \"BG2\" ],[ \"DEFORMED\" , \"ORIGINAL\" ], \"A\" , \"Load Group 1\" , \"FIRST\" , \"A\" ) CS ( \"Stage 2\" , 10 ,[ \"CS2\" , \"CS3\" ],[ 7 , 7 ],[ \"D\" , \"A\" ],[ \"BG2\" ],[ \"ORIGINAL\" ], \"D\" ) CS . create () Advanced Options #Create Node and Element for j in range ( 6 ): for i in range ( 2 ): Node ( i * 10 , j * 2 , 0 ) Node . create () j = 0 for k in range ( 6 ): for i in range ( 1 , 2 ): Element . Beam ( i + j , i + 1 + j ) Element . create () j = j + 2 # Create structural groups Group . Structure ( \"CS1\" , nlist = [ 1 , 2 ], elist = [ 1 ]) Group . Structure ( \"CS2\" , nlist = [ 3 , 4 , 5 , 6 ], elist = [ 2 , 3 ]) Group . Structure ( \"CS3\" , nlist = [ 7 , 8 , 9 , 10 ], elist = [ 4 , 5 , 6 ]) # Create boundary and load groups Group . Boundary ( \"BG1\" ) Group . Boundary ( \"BG2\" ) Group . Load ( \"Load group 1\" ) Group . Load ( \"Load group 2\" ) Group . create () #Create Stage CS ( \"Stage 1\" , 7 , \"CS1\" , 10 , \"A\" , \"BG1\" , \"DEFORMED\" , \"A\" , \"Load Group 1\" , \"FIRST\" , \"A\" ) CS ( \"Stage 2\" , 20 , \"CS2\" , 10 , \"A\" , \"BG2\" , \"DEFORMED\" , \"A\" , sr_stage = True , ad_stage = True , load_in = True , nl = 6 , addstp = [ 1 , 2 , 3 ]) CS . create CS . create () Methods json Returns a JSON representation of all Construction Stages defined in python. cs1 = CS ( \"Stage 1\" , 7 , \"Main Girder\" , 7 , \"A\" ) cs2 = CS ( \"Stage 2\" , 14 , \"Side Girder\" , 14 , \"A\" ) print ( CS . json ()) # Output will show detailed JSON structure for all stages create Sends the current construction stage list to Civil NX using a PUT request. cs1 = CS ( \"Stage 1\" , 7 , \"Main Girder\" , 7 , \"A\" ) cs2 = CS ( \"Stage 2\" , 14 , \"Side Girder\" , 14 , \"A\" ) CS . create () get Fetches construction stages from Civil NX and returns the JSON representation. print ( CS . get ()) # Output will show all construction stages from Civil NX database sync Retrieves Construction Stage data from Civil NX and rebuilds the internal stage list. CS . sync () for cs in CS . CSA : print ( f 'Stage: { cs . NAME } | Duration: { cs . DURATION } days' ) print ( f ' Active Structure Groups: { len ( cs . act_structure_groups ) } ' ) print ( f ' Active Boundary Groups: { len ( cs . act_boundary_groups ) } ' ) print ( f ' Active Load Groups: { len ( cs . act_load_groups ) } ' ) delete Deletes all construction stage data from both Python and Civil NX. CS . delete () Complete Example from midasapi import * MAPI_KEY ( \"eyJ1ciI6IklOMjQwN0ZZVDIiLCJwZyI6ImNpdmlsIiwi\" ) # Paste your Mapi Key # ============================================================================= # CREATE STRUCTURE ONCE - Base Model # ============================================================================= print ( \"Creating Base Structure...\" ) # Create nodes for j in range ( 6 ): for i in range ( 2 ): Node ( i * 10 , j * 2 , 0 ) Node . create () # Create elements j = 0 for k in range ( 6 ): for i in range ( 1 , 2 ): Element . Beam ( i + j , i + 1 + j ) Element . create () j = j + 2 print ( \"Nodes and Elements Created\" ) # ============================================================================= # CREATE GROUPS ONCE - Define All Components # ============================================================================= print ( \"Creating Groups...\" ) # Create structural groups Group . Structure ( \"CS1\" , nlist = [ 1 , 2 ], elist = [ 1 ]) Group . Structure ( \"CS2\" , nlist = [ 3 , 4 , 5 , 6 ], elist = [ 2 , 3 ]) Group . Structure ( \"CS3\" , nlist = [ 7 , 8 , 9 , 10 ], elist = [ 4 , 5 , 6 ]) # Create boundary groups Group . Boundary ( \"BG1\" ) Group . Boundary ( \"BG2\" ) Group . Boundary ( \"BG3\" ) # Create load groups Group . Load ( \"Load Group 1\" ) Group . Load ( \"Load Group 2\" ) Group . Load ( \"Construction Load\" ) Group . create () print ( \"All Groups Created\" ) # ============================================================================= # CONSTRUCTION STAGING SEQUENCE - All Cases Implemented # ============================================================================= print ( \" \\n Creating Construction Stages...\" ) # CASE 1: Single Group Activation # Stage 1: Activate only CS1 CS ( \"Stage 1 - Single Group\" , duration = 7 , s_group = \"CS1\" , s_age = 10 , s_type = \"A\" , b_group = \"BG1\" , b_pos = \"DEFORMED\" , b_type = \"A\" , l_group = \"Load Group 1\" , l_day = \"FIRST\" , l_type = \"A\" ) print ( \"Stage 1: Single Group Activation - CS1\" ) # CASE 2: Multiple Group Activation # Stage 2: Activate multiple groups BG2 and BG3 simultaneously CS ( \"Stage 2 - Multiple Groups\" , duration = 17 , s_group = \"CS2\" , s_age = 10 , s_type = \"A\" , b_group = [ \"BG2\" , \"BG3\" ], b_pos = [ \"DEFORMED\" , \"ORIGINAL\" ], b_type = \"A\" , l_group = \"Load Group 2\" , l_day = \"FIRST\" , l_type = \"A\" ) print ( \"Stage 2: Multiple Group Activation - BG2 & BG3\" ) # CASE 3: Mixed Activation and Deactivation # Stage 3: Deactivate CS2, Activate CS3 (mixed operations) CS ( \"Stage 3 - Mixed Operations\" , duration = 10 , s_group = [ \"CS2\" , \"CS3\" ], s_age = [ 7 , 7 ], s_type = [ \"D\" , \"A\" ], b_group = [ \"BG2\" ], b_pos = [ \"ORIGINAL\" ], b_type = \"D\" ) print ( \"Stage 3: Mixed Operations - Deactivate CS2, Activate CS3\" ) # CASE 4: Advanced Options with Special Parameters # Stage 4: Advanced staging with additional control parameters CS ( \"Stage 4 - Advanced Options\" , duration = 20 , l_group = [ \"Construction Load\" ], l_day = [ \"FIRST\" ], l_type = [ \"A\" ], ad_stage = True , # Additional stage options load_in = True , # Incremental load application nl = 6 , # Number of load steps addstp = [ 1 , 2 , 3 ]) # Additional step control print ( \"Stage 4: Advanced Options - Full parameter control\" ) # Create all construction stages CS . create ()","title":"Construction Stage (CS)"},{"location":"Construction%20Stage/#construction-stage-cs","text":"The module provides functionality to create, manage, and synchronize construction stages for staged construction analysis in the model. It handles activation and deactivation of structure groups, boundary groups, and load groups across different construction phases. Note. All the codes below assumes the initial import and MAPI Key definition. from midasapi import * MAPI_KEY ( 'eyJ1ciI6InN1bWl0QG1pZGFzaXQuY29tIiwicGciO252k81571d' )","title":"Construction Stage (CS)"},{"location":"Construction%20Stage/#construction-stage","text":"","title":"Construction Stage"},{"location":"Construction%20Stage/#constructor","text":"CS(name, duration=0, s_group=None, s_age=None, s_type=None, b_group=None, b_pos=None, b_type=None, l_group=None, l_day=None, l_type=None, id=None, sr_stage=True, ad_stage=False, load_in=False, nl=5, addstp=None) Creates a construction stage with specified parameters for structure, boundary, and load group management.","title":"Constructor"},{"location":"Construction%20Stage/#parameters","text":"name : Name of the construction stage duration (default=0) : Duration of construction stage in days s_group (default=None) : Structure group name or list of group names s_age (default=None) : Age of structure group in days (or redistribution % for deactivation) s_type (default=None) : Structure activation type - \"A\" to activate, \"D\" to deactivate b_group (default=None) : Boundary group name or list of group names b_pos (default=None) : Boundary position type - \"ORIGINAL\" or \"DEFORMED\" b_type (default=None) : Boundary activation type - \"A\" to activate, \"D\" to deactivate l_group (default=None) : Load group name or list of group names l_day (default=None) : Load activation day - \"FIRST\" or \"LAST\" l_type (default=None) : Load activation type - \"A\" to activate, \"D\" to deactivate id (default=None) : Manual construction stage ID assignment (auto-assigned if None) sr_stage (default=True) : Save results of this stage ad_stage (default=False) : Add additional step results load_in (default=False) : Load incremental steps for material nonlinear analysis nl (default=5) : Number of load incremental steps addstp (default=None) : List of additional steps","title":"Parameters"},{"location":"Construction%20Stage/#class-attributes","text":"CS.CSA -> List of all construction stages.","title":"Class Attributes"},{"location":"Construction%20Stage/#examples","text":"","title":"Examples"},{"location":"Construction%20Stage/#single-group-activation","text":"#Create Node and Element for j in range ( 6 ): for i in range ( 2 ): Node ( i * 10 , j * 2 , 0 ) Node . create () j = 0 for k in range ( 6 ): for i in range ( 1 , 2 ): Element . Beam ( i + j , i + 1 + j ) Element . create () j = j + 2 # Create structural groups Group . Structure ( \"CS1\" , nlist = [ 1 , 2 ], elist = [ 1 ]) Group . Structure ( \"CS2\" , nlist = [ 3 , 4 , 5 , 6 ], elist = [ 2 , 3 ]) Group . Structure ( \"CS3\" , nlist = [ 7 , 8 , 9 , 10 ], elist = [ 4 , 5 , 6 ]) # Create boundary and load groups Group . Boundary ( \"BG1\" ) Group . Boundary ( \"BG2\" ) Group . Load ( \"Load group 1\" ) Group . Load ( \"Load group 2\" ) Group . create () #Create Stage CS ( \"Stage 1\" , 7 , \"CS1\" , 10 , \"A\" , \"BG1\" , \"DEFORMED\" , \"A\" , \"Load Group 1\" , \"FIRST\" , \"A\" ) CS . create ()","title":"Single Group Activation"},{"location":"Construction%20Stage/#multiple-group-activation","text":"#Create Node and Element for j in range ( 6 ): for i in range ( 2 ): Node ( i * 10 , j * 2 , 0 ) Node . create () j = 0 for k in range ( 6 ): for i in range ( 1 , 2 ): Element . Beam ( i + j , i + 1 + j ) Element . create () j = j + 2 # Create structural groups Group . Structure ( \"CS1\" , nlist = [ 1 , 2 ], elist = [ 1 ]) Group . Structure ( \"CS2\" , nlist = [ 3 , 4 , 5 , 6 ], elist = [ 2 , 3 ]) Group . Structure ( \"CS3\" , nlist = [ 7 , 8 , 9 , 10 ], elist = [ 4 , 5 , 6 ]) # Create boundary and load groups Group . Boundary ( \"BG1\" ) Group . Boundary ( \"BG2\" ) Group . Load ( \"Load group 1\" ) Group . Load ( \"Load group 2\" ) Group . create () #Create Stage CS ( \"Stage 1\" , 17 ,[ \"CS1\" , \"CS2\" ],[ 10 , 7 ], \"A\" ,[ \"BG1\" , \"BG2\" ],[ \"DEFORMED\" , \"ORIGINAL\" ], \"A\" , \"Load Group 1\" , \"FIRST\" , \"A\" ) CS . create ()","title":"Multiple Group Activation"},{"location":"Construction%20Stage/#mixed-activation-and-deactivation","text":"#Create Node and Element for j in range ( 6 ): for i in range ( 2 ): Node ( i * 10 , j * 2 , 0 ) Node . create () j = 0 for k in range ( 6 ): for i in range ( 1 , 2 ): Element . Beam ( i + j , i + 1 + j ) Element . create () j = j + 2 # Create structural groups Group . Structure ( \"CS1\" , nlist = [ 1 , 2 ], elist = [ 1 ]) Group . Structure ( \"CS2\" , nlist = [ 3 , 4 , 5 , 6 ], elist = [ 2 , 3 ]) Group . Structure ( \"CS3\" , nlist = [ 7 , 8 , 9 , 10 ], elist = [ 4 , 5 , 6 ]) # Create boundary and load groups Group . Boundary ( \"BG1\" ) Group . Boundary ( \"BG2\" ) Group . Load ( \"Load group 1\" ) Group . Load ( \"Load group 2\" ) Group . create () #Create Stage CS ( \"Stage 1\" , 17 ,[ \"CS1\" , \"CS2\" ],[ 10 , 7 ], \"A\" ,[ \"BG1\" , \"BG2\" ],[ \"DEFORMED\" , \"ORIGINAL\" ], \"A\" , \"Load Group 1\" , \"FIRST\" , \"A\" ) CS ( \"Stage 2\" , 10 ,[ \"CS2\" , \"CS3\" ],[ 7 , 7 ],[ \"D\" , \"A\" ],[ \"BG2\" ],[ \"ORIGINAL\" ], \"D\" ) CS . create ()","title":"Mixed Activation and Deactivation"},{"location":"Construction%20Stage/#advanced-options","text":"#Create Node and Element for j in range ( 6 ): for i in range ( 2 ): Node ( i * 10 , j * 2 , 0 ) Node . create () j = 0 for k in range ( 6 ): for i in range ( 1 , 2 ): Element . Beam ( i + j , i + 1 + j ) Element . create () j = j + 2 # Create structural groups Group . Structure ( \"CS1\" , nlist = [ 1 , 2 ], elist = [ 1 ]) Group . Structure ( \"CS2\" , nlist = [ 3 , 4 , 5 , 6 ], elist = [ 2 , 3 ]) Group . Structure ( \"CS3\" , nlist = [ 7 , 8 , 9 , 10 ], elist = [ 4 , 5 , 6 ]) # Create boundary and load groups Group . Boundary ( \"BG1\" ) Group . Boundary ( \"BG2\" ) Group . Load ( \"Load group 1\" ) Group . Load ( \"Load group 2\" ) Group . create () #Create Stage CS ( \"Stage 1\" , 7 , \"CS1\" , 10 , \"A\" , \"BG1\" , \"DEFORMED\" , \"A\" , \"Load Group 1\" , \"FIRST\" , \"A\" ) CS ( \"Stage 2\" , 20 , \"CS2\" , 10 , \"A\" , \"BG2\" , \"DEFORMED\" , \"A\" , sr_stage = True , ad_stage = True , load_in = True , nl = 6 , addstp = [ 1 , 2 , 3 ]) CS . create CS . create ()","title":"Advanced Options"},{"location":"Construction%20Stage/#methods","text":"","title":"Methods"},{"location":"Construction%20Stage/#json","text":"Returns a JSON representation of all Construction Stages defined in python. cs1 = CS ( \"Stage 1\" , 7 , \"Main Girder\" , 7 , \"A\" ) cs2 = CS ( \"Stage 2\" , 14 , \"Side Girder\" , 14 , \"A\" ) print ( CS . json ()) # Output will show detailed JSON structure for all stages","title":"json"},{"location":"Construction%20Stage/#create","text":"Sends the current construction stage list to Civil NX using a PUT request. cs1 = CS ( \"Stage 1\" , 7 , \"Main Girder\" , 7 , \"A\" ) cs2 = CS ( \"Stage 2\" , 14 , \"Side Girder\" , 14 , \"A\" ) CS . create ()","title":"create"},{"location":"Construction%20Stage/#get","text":"Fetches construction stages from Civil NX and returns the JSON representation. print ( CS . get ()) # Output will show all construction stages from Civil NX database","title":"get"},{"location":"Construction%20Stage/#sync","text":"Retrieves Construction Stage data from Civil NX and rebuilds the internal stage list. CS . sync () for cs in CS . CSA : print ( f 'Stage: { cs . NAME } | Duration: { cs . DURATION } days' ) print ( f ' Active Structure Groups: { len ( cs . act_structure_groups ) } ' ) print ( f ' Active Boundary Groups: { len ( cs . act_boundary_groups ) } ' ) print ( f ' Active Load Groups: { len ( cs . act_load_groups ) } ' )","title":"sync"},{"location":"Construction%20Stage/#delete","text":"Deletes all construction stage data from both Python and Civil NX. CS . delete ()","title":"delete"},{"location":"Construction%20Stage/#complete-example","text":"from midasapi import * MAPI_KEY ( \"eyJ1ciI6IklOMjQwN0ZZVDIiLCJwZyI6ImNpdmlsIiwi\" ) # Paste your Mapi Key # ============================================================================= # CREATE STRUCTURE ONCE - Base Model # ============================================================================= print ( \"Creating Base Structure...\" ) # Create nodes for j in range ( 6 ): for i in range ( 2 ): Node ( i * 10 , j * 2 , 0 ) Node . create () # Create elements j = 0 for k in range ( 6 ): for i in range ( 1 , 2 ): Element . Beam ( i + j , i + 1 + j ) Element . create () j = j + 2 print ( \"Nodes and Elements Created\" ) # ============================================================================= # CREATE GROUPS ONCE - Define All Components # ============================================================================= print ( \"Creating Groups...\" ) # Create structural groups Group . Structure ( \"CS1\" , nlist = [ 1 , 2 ], elist = [ 1 ]) Group . Structure ( \"CS2\" , nlist = [ 3 , 4 , 5 , 6 ], elist = [ 2 , 3 ]) Group . Structure ( \"CS3\" , nlist = [ 7 , 8 , 9 , 10 ], elist = [ 4 , 5 , 6 ]) # Create boundary groups Group . Boundary ( \"BG1\" ) Group . Boundary ( \"BG2\" ) Group . Boundary ( \"BG3\" ) # Create load groups Group . Load ( \"Load Group 1\" ) Group . Load ( \"Load Group 2\" ) Group . Load ( \"Construction Load\" ) Group . create () print ( \"All Groups Created\" ) # ============================================================================= # CONSTRUCTION STAGING SEQUENCE - All Cases Implemented # ============================================================================= print ( \" \\n Creating Construction Stages...\" ) # CASE 1: Single Group Activation # Stage 1: Activate only CS1 CS ( \"Stage 1 - Single Group\" , duration = 7 , s_group = \"CS1\" , s_age = 10 , s_type = \"A\" , b_group = \"BG1\" , b_pos = \"DEFORMED\" , b_type = \"A\" , l_group = \"Load Group 1\" , l_day = \"FIRST\" , l_type = \"A\" ) print ( \"Stage 1: Single Group Activation - CS1\" ) # CASE 2: Multiple Group Activation # Stage 2: Activate multiple groups BG2 and BG3 simultaneously CS ( \"Stage 2 - Multiple Groups\" , duration = 17 , s_group = \"CS2\" , s_age = 10 , s_type = \"A\" , b_group = [ \"BG2\" , \"BG3\" ], b_pos = [ \"DEFORMED\" , \"ORIGINAL\" ], b_type = \"A\" , l_group = \"Load Group 2\" , l_day = \"FIRST\" , l_type = \"A\" ) print ( \"Stage 2: Multiple Group Activation - BG2 & BG3\" ) # CASE 3: Mixed Activation and Deactivation # Stage 3: Deactivate CS2, Activate CS3 (mixed operations) CS ( \"Stage 3 - Mixed Operations\" , duration = 10 , s_group = [ \"CS2\" , \"CS3\" ], s_age = [ 7 , 7 ], s_type = [ \"D\" , \"A\" ], b_group = [ \"BG2\" ], b_pos = [ \"ORIGINAL\" ], b_type = \"D\" ) print ( \"Stage 3: Mixed Operations - Deactivate CS2, Activate CS3\" ) # CASE 4: Advanced Options with Special Parameters # Stage 4: Advanced staging with additional control parameters CS ( \"Stage 4 - Advanced Options\" , duration = 20 , l_group = [ \"Construction Load\" ], l_day = [ \"FIRST\" ], l_type = [ \"A\" ], ad_stage = True , # Additional stage options load_in = True , # Incremental load application nl = 6 , # Number of load steps addstp = [ 1 , 2 , 3 ]) # Additional step control print ( \"Stage 4: Advanced Options - Full parameter control\" ) # Create all construction stages CS . create ()","title":"Complete Example"},{"location":"model/","text":"Model This manual provides detailed documentation of the Model class methods used for managing structural analysis models via Midas API. Methods Model. new Creates a new model file. Model . new () Model. open Opens an existing model file. Model . open ( \"D://model.mcb\" ) Model. save Saves the current model. For first-time saves, provide a path. NOTE If path is not provided for the first time GUI prompt will appear Model . save () Model . save ( \"D://model.mcb\" ) Model. saveAs Saves the model to the specified file path. Model . saveAs ( \"D://model.mcb\" ) Model. info Sets the project information. info(project_name=\"\", revision=\"\", user=\"\", title=\"\") Model . info ( project_name = \"Bridge Project\" , revision = \"v1\" , user = \"Sumit Shekhar\" , title = \"Steel Bridge\" ) Model. units Sets the model's working units. Model.units(force=\"KN\", length=\"M\", heat=\"BTU\", temp=\"C\") Parameters force : KN, N, KGF, TONF, LBF, KIPS length : M, CM, MM, FT, IN heat : CAL, KCAL, J, KJ, BTU temp : C, F Model . units () # Set the SI unit system Model . units ( force = 'TONF' ) # Set the Force unit to Tonf NOTE : Make sure the units are in all caps Model. type Sets structure and mass type information for the model. Model.type(strc_type=0, mass_type=1, gravity=0, mass_dir=1) Parameters strc_type : 0 : 3D | 1 : X-Z | 2 : Y-Z | 3 : X-Y | 4 : RZ constraint mass_type : 1 : Lumped | 2 : Consistent gravity : Gravity acceleration (l/t\u00b2) mass_dir : 1 : Convert to XYZ | 2 : Convert to XY | 3 : Convert to Z only Model . type () Model. create Creates all model components: materials, sections, nodes, elements, groups, and boundaries. Equivalent to executing all the create commands individually Model . create () Model. clear Clears all components in the model, including nodes, elements, materials, groups, loads, and boundaries. Equivalent to executing all the delete commands individually Model . clear () NOTE To save time, use individual delete commands eg. Node.delete() ; Element.delete() Model. analyse Checks whether a model has been analyzed. If not, saves it and then analysis. Model . analyse () Model. select Selects nodes and elements based on geometric criteria or material/section properties. Model.select(crit_1, crit_2, crit_3, st='a', en='a', tolerance=0) Parameters crit_1 : X, Y, Z, XY, YZ, ZX, USM (coordinate/system type) crit_2 : Coordinate or Material ID crit_3 : Coordinate or Section ID st, en : Start and end range tolerance : Tolerance for selection Returns Dictionary with selected 'NODE' and 'ELEM' IDs. Model . select ()","title":"Model"},{"location":"model/#model","text":"This manual provides detailed documentation of the Model class methods used for managing structural analysis models via Midas API.","title":"Model"},{"location":"model/#methods","text":"","title":"Methods"},{"location":"model/#modelnew","text":"Creates a new model file. Model . new ()","title":"Model.new"},{"location":"model/#modelopen","text":"Opens an existing model file. Model . open ( \"D://model.mcb\" )","title":"Model.open"},{"location":"model/#modelsave","text":"Saves the current model. For first-time saves, provide a path. NOTE If path is not provided for the first time GUI prompt will appear Model . save () Model . save ( \"D://model.mcb\" )","title":"Model.save"},{"location":"model/#modelsaveas","text":"Saves the model to the specified file path. Model . saveAs ( \"D://model.mcb\" )","title":"Model.saveAs"},{"location":"model/#modelinfo","text":"Sets the project information. info(project_name=\"\", revision=\"\", user=\"\", title=\"\") Model . info ( project_name = \"Bridge Project\" , revision = \"v1\" , user = \"Sumit Shekhar\" , title = \"Steel Bridge\" )","title":"Model.info"},{"location":"model/#modelunits","text":"Sets the model's working units. Model.units(force=\"KN\", length=\"M\", heat=\"BTU\", temp=\"C\")","title":"Model.units"},{"location":"model/#parameters","text":"force : KN, N, KGF, TONF, LBF, KIPS length : M, CM, MM, FT, IN heat : CAL, KCAL, J, KJ, BTU temp : C, F Model . units () # Set the SI unit system Model . units ( force = 'TONF' ) # Set the Force unit to Tonf NOTE : Make sure the units are in all caps","title":"Parameters"},{"location":"model/#modeltype","text":"Sets structure and mass type information for the model. Model.type(strc_type=0, mass_type=1, gravity=0, mass_dir=1)","title":"Model.type"},{"location":"model/#parameters_1","text":"strc_type : 0 : 3D | 1 : X-Z | 2 : Y-Z | 3 : X-Y | 4 : RZ constraint mass_type : 1 : Lumped | 2 : Consistent gravity : Gravity acceleration (l/t\u00b2) mass_dir : 1 : Convert to XYZ | 2 : Convert to XY | 3 : Convert to Z only Model . type ()","title":"Parameters"},{"location":"model/#modelcreate","text":"Creates all model components: materials, sections, nodes, elements, groups, and boundaries. Equivalent to executing all the create commands individually Model . create ()","title":"Model.create"},{"location":"model/#modelclear","text":"Clears all components in the model, including nodes, elements, materials, groups, loads, and boundaries. Equivalent to executing all the delete commands individually Model . clear () NOTE To save time, use individual delete commands eg. Node.delete() ; Element.delete()","title":"Model.clear"},{"location":"model/#modelanalyse","text":"Checks whether a model has been analyzed. If not, saves it and then analysis. Model . analyse ()","title":"Model.analyse"},{"location":"model/#modelselect","text":"Selects nodes and elements based on geometric criteria or material/section properties. Model.select(crit_1, crit_2, crit_3, st='a', en='a', tolerance=0)","title":"Model.select"},{"location":"model/#parameters_2","text":"crit_1 : X, Y, Z, XY, YZ, ZX, USM (coordinate/system type) crit_2 : Coordinate or Material ID crit_3 : Coordinate or Section ID st, en : Start and end range tolerance : Tolerance for selection","title":"Parameters"},{"location":"model/#returns","text":"Dictionary with selected 'NODE' and 'ELEM' IDs. Model . select ()","title":"Returns"},{"location":"node/","text":"Node Represents a 3D point in space with ID. It facilitates node creation, synchronization, and deletion. Note. All the codes below assumes the initial import and MAPI Key definition. from midasapi import * MAPI_KEY ( 'eyJ1ciI6InN1bWl0QG1pZGFzaXQuY29tIiwicGciO252a81571d' ) Constructor Node( x , y , z , id = 0 , merge = 1 ) Parameters x, y, z : Coordinates of the node. id (default=0) : Manually assign an ID. If 0, ID will be auto-assigned. merge (default=1) : If enabled, checks for existing nodes and return their IDs. No additional/duplicate node will be created. Attributes X, Y, Z : Coordinates of the node. ID : Unique identifier. Class Attributes Node.nodes -> List of all nodes. n1 = Node ( 0 , 1 , 2 , 10 ) # Create Node at 0,1,2 with ID = 10 n2 = Node ( 0 , 3 , 4 , 20 ) # Create Node at 0,3,4 with ID = 20 for n in Node . nodes : print ( f ' NODE ID = { n . ID } | X = { n . X } , Y = { n . Y } , Z = { n . Z } ' ) # Output : # NODE ID = 10 | X = 0 , Y = 1 , Z = 2 # NODE ID = 20 | X = 0 , Y = 3 , Z = 4 Methods Node. json Returns a JSON representation of all Nodes defined in python. n1 = Node ( 0 , 1 , 2 , 10 ) # Create Node at 0,1,2 with ID = 10 n2 = Node ( 0 , 3 , 4 , 20 ) # Create Node at 0,3,4 with ID = 20 print ( Node . json ()) # Output : # {'Assign': {10: {'X': 0, 'Y': 1, 'Z': 2}, 20: {'X': 0, 'Y': 3, 'Z': 4}}} Node. create Sends the current node list to the Civil NX using a PUT request. New nodes are created and existing nodes(same ID) in Civil NX will be updated. n1 = Node ( 0 , 1 , 2 , 10 ) # Create Node at 0,1,2 with ID = 10 n2 = Node ( 0 , 3 , 4 , 20 ) # Create Node at 0,3,4 with ID = 20 Node . create () Node. get Fetches nodes from the Civil NX and return the JSON representation. -Here, Civil model had 2 nodes print ( Node . get ()) # Output # {'NODE': {'1': {'X': 1, 'Y': 2, 'Z': 3}, '2': {'X': 1, 'Y': 3, 'Z': 2}}} Node. sync Retrieves Node data from the Civil NX and rebuilds the internal node list. -Here, Civil model had 2 nodes Node . sync () for n in Node . nodes : print ( f ' NODE ID = { n . ID } | X = { n . X } , Y = { n . Y } , Z = { n . Z } ' ) # Output # NODE ID = 1 | X = 1 , Y = 2 , Z = 3 # NODE ID = 2 | X = 1 , Y = 3 , Z = 2 Node. delete Deletes all node data from both Python and Civil NX. Node . delete () Examples 1. Sine Grid n = 50 for j in range ( n ): for i in range ( n ): Node ( i , j , 2 * ( math . sin ( i / 5 ) + math . sin ( j / 5 )), 100 * i + j + 1 ) Node . create () 2. Sphere Nodes import math n = 50 R = 5 phi = 0 for j in range ( 40 ): for i in range ( n ): theta = i * 2 * math . pi / n Node ( R * math . sin ( theta ) * math . cos ( phi ), R * math . cos ( theta ), R * math . sin ( theta ) * math . sin ( phi )) phi += math . pi / 16 Node . create () 3. Rotating Nodes import math n = 50 R = 5 phi = 0 for j in range ( 40 ): for i in range ( n ): theta = i * 2 * math . pi / n Node ( R * math . sin ( theta ) * math . cos ( phi ), R * math . cos ( theta ), R * math . sin ( theta ) * math . sin ( phi ), i + 1 ) phi += math . pi / 16 Node . create ()","title":"Node"},{"location":"node/#node","text":"Represents a 3D point in space with ID. It facilitates node creation, synchronization, and deletion. Note. All the codes below assumes the initial import and MAPI Key definition. from midasapi import * MAPI_KEY ( 'eyJ1ciI6InN1bWl0QG1pZGFzaXQuY29tIiwicGciO252a81571d' )","title":"Node"},{"location":"node/#constructor","text":"Node( x , y , z , id = 0 , merge = 1 )","title":"Constructor"},{"location":"node/#parameters","text":"x, y, z : Coordinates of the node. id (default=0) : Manually assign an ID. If 0, ID will be auto-assigned. merge (default=1) : If enabled, checks for existing nodes and return their IDs. No additional/duplicate node will be created.","title":"Parameters"},{"location":"node/#attributes","text":"X, Y, Z : Coordinates of the node. ID : Unique identifier.","title":"Attributes"},{"location":"node/#class-attributes","text":"Node.nodes -> List of all nodes. n1 = Node ( 0 , 1 , 2 , 10 ) # Create Node at 0,1,2 with ID = 10 n2 = Node ( 0 , 3 , 4 , 20 ) # Create Node at 0,3,4 with ID = 20 for n in Node . nodes : print ( f ' NODE ID = { n . ID } | X = { n . X } , Y = { n . Y } , Z = { n . Z } ' ) # Output : # NODE ID = 10 | X = 0 , Y = 1 , Z = 2 # NODE ID = 20 | X = 0 , Y = 3 , Z = 4","title":"Class Attributes"},{"location":"node/#methods","text":"","title":"Methods"},{"location":"node/#nodejson","text":"Returns a JSON representation of all Nodes defined in python. n1 = Node ( 0 , 1 , 2 , 10 ) # Create Node at 0,1,2 with ID = 10 n2 = Node ( 0 , 3 , 4 , 20 ) # Create Node at 0,3,4 with ID = 20 print ( Node . json ()) # Output : # {'Assign': {10: {'X': 0, 'Y': 1, 'Z': 2}, 20: {'X': 0, 'Y': 3, 'Z': 4}}}","title":"Node.json"},{"location":"node/#nodecreate","text":"Sends the current node list to the Civil NX using a PUT request. New nodes are created and existing nodes(same ID) in Civil NX will be updated. n1 = Node ( 0 , 1 , 2 , 10 ) # Create Node at 0,1,2 with ID = 10 n2 = Node ( 0 , 3 , 4 , 20 ) # Create Node at 0,3,4 with ID = 20 Node . create ()","title":"Node.create"},{"location":"node/#nodeget","text":"Fetches nodes from the Civil NX and return the JSON representation. -Here, Civil model had 2 nodes print ( Node . get ()) # Output # {'NODE': {'1': {'X': 1, 'Y': 2, 'Z': 3}, '2': {'X': 1, 'Y': 3, 'Z': 2}}}","title":"Node.get"},{"location":"node/#nodesync","text":"Retrieves Node data from the Civil NX and rebuilds the internal node list. -Here, Civil model had 2 nodes Node . sync () for n in Node . nodes : print ( f ' NODE ID = { n . ID } | X = { n . X } , Y = { n . Y } , Z = { n . Z } ' ) # Output # NODE ID = 1 | X = 1 , Y = 2 , Z = 3 # NODE ID = 2 | X = 1 , Y = 3 , Z = 2","title":"Node.sync"},{"location":"node/#nodedelete","text":"Deletes all node data from both Python and Civil NX. Node . delete ()","title":"Node.delete"},{"location":"node/#examples","text":"","title":"Examples"},{"location":"node/#1-sine-grid","text":"n = 50 for j in range ( n ): for i in range ( n ): Node ( i , j , 2 * ( math . sin ( i / 5 ) + math . sin ( j / 5 )), 100 * i + j + 1 ) Node . create ()","title":"1. Sine Grid"},{"location":"node/#2-sphere-nodes","text":"import math n = 50 R = 5 phi = 0 for j in range ( 40 ): for i in range ( n ): theta = i * 2 * math . pi / n Node ( R * math . sin ( theta ) * math . cos ( phi ), R * math . cos ( theta ), R * math . sin ( theta ) * math . sin ( phi )) phi += math . pi / 16 Node . create ()","title":"2. Sphere Nodes"},{"location":"node/#3-rotating-nodes","text":"import math n = 50 R = 5 phi = 0 for j in range ( 40 ): for i in range ( n ): theta = i * 2 * math . pi / n Node ( R * math . sin ( theta ) * math . cos ( phi ), R * math . cos ( theta ), R * math . sin ( theta ) * math . sin ( phi ), i + 1 ) phi += math . pi / 16 Node . create ()","title":"3. Rotating Nodes"},{"location":"Boundary/","text":"Boundary The module provides functionality to create, manage, and synchronize boundary conditions including supports, elastic links, and rigid links in the model. Note. All the codes below assumes the initial import and MAPI Key definition. from midasapi import * MAPI_KEY ( 'eyJ1ciI6InN1bWl0QG1pZGFzaXQuY29tIiwicmciO252k81571d' ) Boundary Class The Boundary class provides a unified interface to create different types of boundary conditions and includes nested classes for specific boundary types. Methods Boundary. create Creates all defined boundary conditions (Supports, Elastic Links, and Rigid Links) in Civil NX. Boundary . create () Boundary. delete Deletes all boundary conditions from both Python and Civil NX. Boundary . delete () Boundary. sync Synchronizes all boundary conditions from Civil NX to Python. Boundary . sync () Complete Example from midasapi import * MAPI_KEY ( \"eyJ1ciI6IklOMjQwN0ZZVDIiLCJwZyI6ImNpdmlsIiwi\" ) # Paste your MAPI Key #Create Beam and Node for j in range ( 6 ): for i in range ( 2 ): Node ( i * 10 , j * 2 , 0 ) Node . create () for j in range ( 6 ): for i in range ( 2 ): Node ( i * 10 , j * 2 , - 3 ) Node . create () j = 0 for k in range ( 6 ): for i in range ( 1 , 2 ): Element . Beam ( i + j , i + 1 + j ) Element . create () j = j + 2 #Support Boundary . Support ( 13 , \"fix\" ) Boundary . Support ( 14 , \"1111111\" ) Boundary . Support ( 15 , \"fix\" ) Boundary . Support ( 16 , \"1111000\" ) Boundary . Support ( 17 , \"pin\" ) Boundary . Support ( 18 , \"roller\" ) Boundary . Support ( 19 , \"1110000\" ) Boundary . Support ( 20 , \"1111000\" ) Boundary . Support ( 21 , \"free\" ) Boundary . Support ( 22 , \"roller\" ) Boundary . Support ( 23 , \"1110101\" ) Boundary . Support ( 24 , \"0101011\" ) Boundary . Support . create () #Elastic Link #Create General Elastic Link Boundary . ElasticLink ( 1 , 13 , \"\" , 1 , \"GEN\" , 1000 , 1000 , 1000 , 100 , 100 , 100 ) Boundary . ElasticLink ( 2 , 14 , \"\" , 2 , \"GEN\" , 1000 , 1000 , 1000 , 100 , 100 , 100 ) #Rigid Link Boundary . ElasticLink ( 3 , 15 , \"\" , 3 , \"RIGID\" ) #Create Saddle type Link Boundary . ElasticLink ( 4 , 16 , \"\" , 4 , \"SADDLE\" ) #Tension-Onl & Compression-Only Link Boundary . ElasticLink ( 5 , 17 , \"\" , 5 , \"TENS\" , 500 ) Boundary . ElasticLink ( 6 , 18 , \"\" , 6 , \"COMP\" , 600 ) # Rail track interaction link Boundary . ElasticLink ( 7 , 19 , \"\" , 7 , \"RAIL INTERACT\" , dir = \"Dy\" , func_id = 1 ) #Multi-linear link Boundary . ElasticLink ( 8 , 20 , \"\" , 8 , \"MULTI LINEAR\" , dir = \"Dy\" , func_id = 1 ) # Note: Before running this code, the Rail Interaction & Force-Deformation function must be created in Civil NX to avoid any errors. #Create all the Elastic link Boundary . ElasticLink . create () #Rigid Link Boundary . RigidLink ( 9 ,[ 21 ], \"\" , 1 , 111111 ) Boundary . RigidLink ( 10 ,[ 22 , 24 ], \"\" , 2 , 111111 ) Boundary . RigidLink . create () print ( \"All boundary conditions created successfully!\" )","title":"Boundary"},{"location":"Boundary/#boundary","text":"The module provides functionality to create, manage, and synchronize boundary conditions including supports, elastic links, and rigid links in the model. Note. All the codes below assumes the initial import and MAPI Key definition. from midasapi import * MAPI_KEY ( 'eyJ1ciI6InN1bWl0QG1pZGFzaXQuY29tIiwicmciO252k81571d' )","title":"Boundary"},{"location":"Boundary/#boundary-class","text":"The Boundary class provides a unified interface to create different types of boundary conditions and includes nested classes for specific boundary types.","title":"Boundary Class"},{"location":"Boundary/#methods","text":"","title":"Methods"},{"location":"Boundary/#boundarycreate","text":"Creates all defined boundary conditions (Supports, Elastic Links, and Rigid Links) in Civil NX. Boundary . create ()","title":"Boundary.create"},{"location":"Boundary/#boundarydelete","text":"Deletes all boundary conditions from both Python and Civil NX. Boundary . delete ()","title":"Boundary.delete"},{"location":"Boundary/#boundarysync","text":"Synchronizes all boundary conditions from Civil NX to Python. Boundary . sync ()","title":"Boundary.sync"},{"location":"Boundary/#complete-example","text":"from midasapi import * MAPI_KEY ( \"eyJ1ciI6IklOMjQwN0ZZVDIiLCJwZyI6ImNpdmlsIiwi\" ) # Paste your MAPI Key #Create Beam and Node for j in range ( 6 ): for i in range ( 2 ): Node ( i * 10 , j * 2 , 0 ) Node . create () for j in range ( 6 ): for i in range ( 2 ): Node ( i * 10 , j * 2 , - 3 ) Node . create () j = 0 for k in range ( 6 ): for i in range ( 1 , 2 ): Element . Beam ( i + j , i + 1 + j ) Element . create () j = j + 2 #Support Boundary . Support ( 13 , \"fix\" ) Boundary . Support ( 14 , \"1111111\" ) Boundary . Support ( 15 , \"fix\" ) Boundary . Support ( 16 , \"1111000\" ) Boundary . Support ( 17 , \"pin\" ) Boundary . Support ( 18 , \"roller\" ) Boundary . Support ( 19 , \"1110000\" ) Boundary . Support ( 20 , \"1111000\" ) Boundary . Support ( 21 , \"free\" ) Boundary . Support ( 22 , \"roller\" ) Boundary . Support ( 23 , \"1110101\" ) Boundary . Support ( 24 , \"0101011\" ) Boundary . Support . create () #Elastic Link #Create General Elastic Link Boundary . ElasticLink ( 1 , 13 , \"\" , 1 , \"GEN\" , 1000 , 1000 , 1000 , 100 , 100 , 100 ) Boundary . ElasticLink ( 2 , 14 , \"\" , 2 , \"GEN\" , 1000 , 1000 , 1000 , 100 , 100 , 100 ) #Rigid Link Boundary . ElasticLink ( 3 , 15 , \"\" , 3 , \"RIGID\" ) #Create Saddle type Link Boundary . ElasticLink ( 4 , 16 , \"\" , 4 , \"SADDLE\" ) #Tension-Onl & Compression-Only Link Boundary . ElasticLink ( 5 , 17 , \"\" , 5 , \"TENS\" , 500 ) Boundary . ElasticLink ( 6 , 18 , \"\" , 6 , \"COMP\" , 600 ) # Rail track interaction link Boundary . ElasticLink ( 7 , 19 , \"\" , 7 , \"RAIL INTERACT\" , dir = \"Dy\" , func_id = 1 ) #Multi-linear link Boundary . ElasticLink ( 8 , 20 , \"\" , 8 , \"MULTI LINEAR\" , dir = \"Dy\" , func_id = 1 ) # Note: Before running this code, the Rail Interaction & Force-Deformation function must be created in Civil NX to avoid any errors. #Create all the Elastic link Boundary . ElasticLink . create () #Rigid Link Boundary . RigidLink ( 9 ,[ 21 ], \"\" , 1 , 111111 ) Boundary . RigidLink ( 10 ,[ 22 , 24 ], \"\" , 2 , 111111 ) Boundary . RigidLink . create () print ( \"All boundary conditions created successfully!\" )","title":"Complete Example"},{"location":"Boundary/01supports/","text":"SUPPORT A nested class within Boundary used to create nodal supports with various constraint conditions. Constructor Boundary.Support(node, constraint, group = \"\") Creates support conditions at specified nodes with defined constraints. Parameters node : Node ID where support is applied constraint : Constraint definition (string of 1s and 0s, or predefined keywords) group (default=\"\") : Boundary group name Constraint Options String format : \"1110000\" (7 characters for DOF: DX, DY, DZ, RX, RY, RZ, WARP) Predefined keywords : \"pin\" : Pinned support (translational constraints only) \"fix\" : Fixed support (all DOF constrained) \"roller\" : Roller support (vertical constraint only) Class Attributes Boundary.Support.sups -> List of all support instances. Methods json Returns JSON representation of all supports. sup1 = Boundary . Support ( 101 , \"fix\" ) print ( Boundary . Support . json ()) create Sends support data to Civil NX. Boundary . Support . create () get Fetches support data from Civil NX. print ( Boundary . Support . get ()) sync Synchronizes supports from Civil NX to Python. Boundary . Support . sync () delete Deletes all supports from both Python and Civil NX. Boundary . Support . delete () Examples #Create Beam for i in range ( 3 ): Node ( i * 10 , 0 , 0 ) Node . create () Element . Beam ( 1 , 2 ) Element . Beam ( 2 , 3 ) Element . create () #Apply Support Boundary . Support ( 1 , \"1111111\" , \"\" ) Boundary . Support ( 3 , \"pin\" , \"\" ) #create Support Boundary . Support . create () #Note: \"\" represents the absence of a boundary group. By default, it is set to \"\". # Therefore, the following two commands are equivalent:Boundary.Support(3, \"pin\") and Boundary.Support(3, \"pin\", \"\").","title":"\u200e \u200e \u200e Supports"},{"location":"Boundary/01supports/#support","text":"A nested class within Boundary used to create nodal supports with various constraint conditions.","title":"SUPPORT"},{"location":"Boundary/01supports/#constructor","text":"Boundary.Support(node, constraint, group = \"\") Creates support conditions at specified nodes with defined constraints.","title":"Constructor"},{"location":"Boundary/01supports/#parameters","text":"node : Node ID where support is applied constraint : Constraint definition (string of 1s and 0s, or predefined keywords) group (default=\"\") : Boundary group name","title":"Parameters"},{"location":"Boundary/01supports/#constraint-options","text":"String format : \"1110000\" (7 characters for DOF: DX, DY, DZ, RX, RY, RZ, WARP) Predefined keywords : \"pin\" : Pinned support (translational constraints only) \"fix\" : Fixed support (all DOF constrained) \"roller\" : Roller support (vertical constraint only)","title":"Constraint Options"},{"location":"Boundary/01supports/#class-attributes","text":"Boundary.Support.sups -> List of all support instances.","title":"Class Attributes"},{"location":"Boundary/01supports/#methods","text":"","title":"Methods"},{"location":"Boundary/01supports/#json","text":"Returns JSON representation of all supports. sup1 = Boundary . Support ( 101 , \"fix\" ) print ( Boundary . Support . json ())","title":"json"},{"location":"Boundary/01supports/#create","text":"Sends support data to Civil NX. Boundary . Support . create ()","title":"create"},{"location":"Boundary/01supports/#get","text":"Fetches support data from Civil NX. print ( Boundary . Support . get ())","title":"get"},{"location":"Boundary/01supports/#sync","text":"Synchronizes supports from Civil NX to Python. Boundary . Support . sync ()","title":"sync"},{"location":"Boundary/01supports/#delete","text":"Deletes all supports from both Python and Civil NX. Boundary . Support . delete ()","title":"delete"},{"location":"Boundary/01supports/#examples","text":"#Create Beam for i in range ( 3 ): Node ( i * 10 , 0 , 0 ) Node . create () Element . Beam ( 1 , 2 ) Element . Beam ( 2 , 3 ) Element . create () #Apply Support Boundary . Support ( 1 , \"1111111\" , \"\" ) Boundary . Support ( 3 , \"pin\" , \"\" ) #create Support Boundary . Support . create () #Note: \"\" represents the absence of a boundary group. By default, it is set to \"\". # Therefore, the following two commands are equivalent:Boundary.Support(3, \"pin\") and Boundary.Support(3, \"pin\", \"\").","title":"Examples"},{"location":"Boundary/02elink/","text":"ELASTIC LINK A nested class within Boundary used to create elastic connections between nodes with various spring properties and link types. Constructor Boundary.ElasticLink(i_node, j_node, group = \"\", id = None, link_type = \"GEN\", sdx = 0, sdy = 0, sdz = 0, srx = 0, sry = 0, srz = 0, shear = False, dr_y = 0.5, dr_z = 0.5, beta_angle = 0, dir = \"Dy\", func_id = 1, distance_ratio = 0) Creates elastic links between two nodes with specified spring properties and behavior. Parameters i_node : First node ID j_node : Second node ID group (default=\"\") : Boundary group name id (default=None) : Manual ID assignment (auto-assigned if None) link_type (default=\"GEN\") : Type of elastic link sdx, sdy, sdz (default=0) : Translational spring stiffness in X, Y, Z directions srx, sry, srz (default=0) : Rotational spring stiffness about X, Y, Z axes shear (default=False) : Consider shear effects dr_y, dr_z (default=0.5) : Distance ratios for Y and Z directions beta_angle (default=0) : Rotation angle in degrees dir (default=\"Dy\") : Direction for specialized link types func_id (default=1) : Function ID for specialized link types distance_ratio (default=0) : Distance ratio for specialized link types Class Attributes Boundary.ElasticLink.links -> List of all elastic link instances. Link Types \"GEN\" : General elastic link with full stiffness matrix \"RIGID\" : Rigid connection (infinite stiffness) \"TENS\" : Tension-only link (works only in tension) \"COMP\" : Compression-only link (works only in compression) \"MULTI LINEAR\" : Multi-linear behavior with function definition \"SADDLE\" : Saddle-type connection \"RAIL INTERACT\" : Rail track interaction link Methods json Returns JSON representation of all elastic links. link1 = Boundary . ElasticLink ( 1 , 2 , \"Group1\" , 1 , \"GEN\" , 1000 , 1000 , 1000 ) print ( Boundary . ElasticLink . json ()) create Sends elastic link data to Civil NX. Boundary . ElasticLink . create () get Fetches elastic link data from Civil NX. print ( Boundary . ElasticLink . get ()) sync Synchronizes elastic links from Civil NX to Python. Boundary . ElasticLink . sync () delete Deletes all elastic links from both Python and Civil NX. Boundary . ElasticLink . delete () Examples General Elastic Link #General Elastic Link Example #Create Beam and Node for j in range ( 2 ): for i in range ( 2 ): Node ( i * 10 , 0 , - 1 * j ) Node . create () Element . Beam ( 1 , 2 ) Element . create () #Create General Elastic Link Boundary . ElasticLink ( 1 , 3 , \"\" , 1 , \"GEN\" , 1000 , 1000 , 1000 , 100 , 100 , 100 ) Boundary . ElasticLink . create () Rigid Link #Rigid Link Example #Create Beam and Node for j in range ( 2 ): for i in range ( 2 ): Node ( i * 10 , 0 , - 1 * j ) Node . create () Element . Beam ( 1 , 2 ) Element . create () #Create Rigid Link Boundary . ElasticLink ( 2 , 4 , \"\" , 1 , \"RIGID\" ) Boundary . ElasticLink . create () Tension-Only & Compression-Only Link #Tension-Only & Compression-Only Link Example #Create Beam and Node for j in range ( 2 ): for i in range ( 2 ): Node ( i * 10 , 0 , - 1 * j ) Node . create () Element . Beam ( 1 , 2 ) Element . create () #Tension-Onl & Compression-Only Link Boundary . ElasticLink ( 1 , 3 , \"\" , 1 , \"TENS\" , 500 ) Boundary . ElasticLink ( 2 , 4 , \"\" , 2 , \"COMP\" , 600 ) Boundary . ElasticLink . create () Saddle type Link #Saddle type Link Example #Create Beam and Node for j in range ( 2 ): for i in range ( 2 ): Node ( i * 10 , 0 , - 1 * j ) Node . create () Element . Beam ( 1 , 2 ) Element . create () #Create Saddle type Link Boundary . ElasticLink ( 1 , 3 , \"\" , 1 , \"SADDLE\" ) Boundary . ElasticLink . create () Multi-Linear Link #Multi-linear link Example #Create Beam and Node for j in range ( 2 ): for i in range ( 2 ): Node ( i * 10 , 0 , - 1 * j ) Node . create () Element . Beam ( 1 , 2 ) Element . create () # Multi-linear link Boundary . ElasticLink ( 1 , 3 , \"\" , 1 , \"MULTI LINEAR\" , dir = \"Dy\" , func_id = 1 ) Boundary . ElasticLink . create () #Note: Before running this code, the Force-Deformation function must be created in Civil NX to avoid any errors. Rail Interaction Link # Rail track interaction link Example #Create Beam and Node for j in range ( 2 ): for i in range ( 2 ): Node ( i * 10 , 0 , - 1 * j ) Node . create () Element . Beam ( 1 , 2 ) Element . create () # Rail track interaction link Boundary . ElasticLink ( 2 , 4 , \"\" , 1 , \"RAIL INTERACT\" , dir = \"Dy\" , func_id = 1 ) Boundary . ElasticLink . create () #Note: Before running this code, the Rail Interaction function must be created in Civil NX to avoid any errors.","title":"\u200e \u200e \u200e Elastic Link"},{"location":"Boundary/02elink/#elastic-link","text":"A nested class within Boundary used to create elastic connections between nodes with various spring properties and link types.","title":"ELASTIC LINK"},{"location":"Boundary/02elink/#constructor","text":"Boundary.ElasticLink(i_node, j_node, group = \"\", id = None, link_type = \"GEN\", sdx = 0, sdy = 0, sdz = 0, srx = 0, sry = 0, srz = 0, shear = False, dr_y = 0.5, dr_z = 0.5, beta_angle = 0, dir = \"Dy\", func_id = 1, distance_ratio = 0) Creates elastic links between two nodes with specified spring properties and behavior.","title":"Constructor"},{"location":"Boundary/02elink/#parameters","text":"i_node : First node ID j_node : Second node ID group (default=\"\") : Boundary group name id (default=None) : Manual ID assignment (auto-assigned if None) link_type (default=\"GEN\") : Type of elastic link sdx, sdy, sdz (default=0) : Translational spring stiffness in X, Y, Z directions srx, sry, srz (default=0) : Rotational spring stiffness about X, Y, Z axes shear (default=False) : Consider shear effects dr_y, dr_z (default=0.5) : Distance ratios for Y and Z directions beta_angle (default=0) : Rotation angle in degrees dir (default=\"Dy\") : Direction for specialized link types func_id (default=1) : Function ID for specialized link types distance_ratio (default=0) : Distance ratio for specialized link types","title":"Parameters"},{"location":"Boundary/02elink/#class-attributes","text":"Boundary.ElasticLink.links -> List of all elastic link instances.","title":"Class Attributes"},{"location":"Boundary/02elink/#link-types","text":"\"GEN\" : General elastic link with full stiffness matrix \"RIGID\" : Rigid connection (infinite stiffness) \"TENS\" : Tension-only link (works only in tension) \"COMP\" : Compression-only link (works only in compression) \"MULTI LINEAR\" : Multi-linear behavior with function definition \"SADDLE\" : Saddle-type connection \"RAIL INTERACT\" : Rail track interaction link","title":"Link Types"},{"location":"Boundary/02elink/#methods","text":"","title":"Methods"},{"location":"Boundary/02elink/#json","text":"Returns JSON representation of all elastic links. link1 = Boundary . ElasticLink ( 1 , 2 , \"Group1\" , 1 , \"GEN\" , 1000 , 1000 , 1000 ) print ( Boundary . ElasticLink . json ())","title":"json"},{"location":"Boundary/02elink/#create","text":"Sends elastic link data to Civil NX. Boundary . ElasticLink . create ()","title":"create"},{"location":"Boundary/02elink/#get","text":"Fetches elastic link data from Civil NX. print ( Boundary . ElasticLink . get ())","title":"get"},{"location":"Boundary/02elink/#sync","text":"Synchronizes elastic links from Civil NX to Python. Boundary . ElasticLink . sync ()","title":"sync"},{"location":"Boundary/02elink/#delete","text":"Deletes all elastic links from both Python and Civil NX. Boundary . ElasticLink . delete ()","title":"delete"},{"location":"Boundary/02elink/#examples","text":"","title":"Examples"},{"location":"Boundary/02elink/#general-elastic-link","text":"#General Elastic Link Example #Create Beam and Node for j in range ( 2 ): for i in range ( 2 ): Node ( i * 10 , 0 , - 1 * j ) Node . create () Element . Beam ( 1 , 2 ) Element . create () #Create General Elastic Link Boundary . ElasticLink ( 1 , 3 , \"\" , 1 , \"GEN\" , 1000 , 1000 , 1000 , 100 , 100 , 100 ) Boundary . ElasticLink . create ()","title":"General Elastic Link"},{"location":"Boundary/02elink/#rigid-link","text":"#Rigid Link Example #Create Beam and Node for j in range ( 2 ): for i in range ( 2 ): Node ( i * 10 , 0 , - 1 * j ) Node . create () Element . Beam ( 1 , 2 ) Element . create () #Create Rigid Link Boundary . ElasticLink ( 2 , 4 , \"\" , 1 , \"RIGID\" ) Boundary . ElasticLink . create ()","title":"Rigid Link"},{"location":"Boundary/02elink/#tension-only-compression-only-link","text":"#Tension-Only & Compression-Only Link Example #Create Beam and Node for j in range ( 2 ): for i in range ( 2 ): Node ( i * 10 , 0 , - 1 * j ) Node . create () Element . Beam ( 1 , 2 ) Element . create () #Tension-Onl & Compression-Only Link Boundary . ElasticLink ( 1 , 3 , \"\" , 1 , \"TENS\" , 500 ) Boundary . ElasticLink ( 2 , 4 , \"\" , 2 , \"COMP\" , 600 ) Boundary . ElasticLink . create ()","title":"Tension-Only &amp; Compression-Only Link"},{"location":"Boundary/02elink/#saddle-type-link","text":"#Saddle type Link Example #Create Beam and Node for j in range ( 2 ): for i in range ( 2 ): Node ( i * 10 , 0 , - 1 * j ) Node . create () Element . Beam ( 1 , 2 ) Element . create () #Create Saddle type Link Boundary . ElasticLink ( 1 , 3 , \"\" , 1 , \"SADDLE\" ) Boundary . ElasticLink . create ()","title":"Saddle type Link"},{"location":"Boundary/02elink/#multi-linear-link","text":"#Multi-linear link Example #Create Beam and Node for j in range ( 2 ): for i in range ( 2 ): Node ( i * 10 , 0 , - 1 * j ) Node . create () Element . Beam ( 1 , 2 ) Element . create () # Multi-linear link Boundary . ElasticLink ( 1 , 3 , \"\" , 1 , \"MULTI LINEAR\" , dir = \"Dy\" , func_id = 1 ) Boundary . ElasticLink . create () #Note: Before running this code, the Force-Deformation function must be created in Civil NX to avoid any errors.","title":"Multi-Linear Link"},{"location":"Boundary/02elink/#rail-interaction-link","text":"# Rail track interaction link Example #Create Beam and Node for j in range ( 2 ): for i in range ( 2 ): Node ( i * 10 , 0 , - 1 * j ) Node . create () Element . Beam ( 1 , 2 ) Element . create () # Rail track interaction link Boundary . ElasticLink ( 2 , 4 , \"\" , 1 , \"RAIL INTERACT\" , dir = \"Dy\" , func_id = 1 ) Boundary . ElasticLink . create () #Note: Before running this code, the Rail Interaction function must be created in Civil NX to avoid any errors.","title":"Rail Interaction Link"},{"location":"Boundary/03rlink/","text":"RIGID LINK A nested class within Boundary used to create rigid connections between a master node and multiple slave nodes. Constructor Boundary.RigidLink(master_node, slave_nodes, group = \"\", id = None, dof = 111111) Creates rigid links connecting a master node to one or more slave nodes with specified degrees of freedom. Parameters master_node : Master node ID (controls the motion) slave_nodes : List of slave node IDs (follow master node motion) group (default=\"\") : Boundary group name id (default=None) : Manual ID assignment (auto-assigned if None) dof (default=111111) : Degrees of freedom constraint (6-digit integer) Class Attributes Boundary.RigidLink.links -> List of all rigid link instances. DOF Constraint Format 6-digit format : DXDYDZ RXRYRZ (e.g., 111111 for all DOF, 111000 for translations only) 1 : Constrained (rigid connection) 0 : Free (no constraint) Methods json Returns JSON representation of all rigid links. rlink1 = Boundary . RigidLink ( 1 , [ 2 , 3 ], \"Group1\" , 1 , 111111 ) print ( Boundary . RigidLink . json ()) create Sends rigid link data to Civil NX. Boundary . RigidLink . create () get Fetches rigid link data from Civil NX. print ( Boundary . RigidLink . get ()) sync Synchronizes rigid links from Civil NX to Python. Boundary . RigidLink . sync () delete Deletes all rigid links from both Python and Civil NX. Boundary . RigidLink . delete () Examples Single Slave Node # Create nodes for i in range ( 5 ): Node ( i * 5 , 0 , 0 ) Node . create () # Rigid link between master and single slave rlink1 = Boundary . RigidLink ( 1 , [ 2 ], \"Group1\" , 1 , 111111 ) Boundary . RigidLink . create () Multiple Slave Nodes # Create nodes for i in range ( 5 ): Node ( i * 5 , 0 , 0 ) Node . create () # Rigid link with multiple slave nodes rlink2 = Boundary . RigidLink ( 3 , [ 4 , 5 ], \"Group2\" , 2 , 111111 ) Boundary . RigidLink . create () Partial DOF Constraint # Create nodes for i in range ( 5 ): Node ( i * 5 , 0 , 0 ) Node . create () # Rigid link with only translational constraints rlink3 = Boundary . RigidLink ( 1 , [ 2 , 3 ], \"Group3\" , 3 , 111000 ) Boundary . RigidLink . create ()","title":"\u200e \u200e \u200e Rigid Link"},{"location":"Boundary/03rlink/#rigid-link","text":"A nested class within Boundary used to create rigid connections between a master node and multiple slave nodes.","title":"RIGID LINK"},{"location":"Boundary/03rlink/#constructor","text":"Boundary.RigidLink(master_node, slave_nodes, group = \"\", id = None, dof = 111111) Creates rigid links connecting a master node to one or more slave nodes with specified degrees of freedom.","title":"Constructor"},{"location":"Boundary/03rlink/#parameters","text":"master_node : Master node ID (controls the motion) slave_nodes : List of slave node IDs (follow master node motion) group (default=\"\") : Boundary group name id (default=None) : Manual ID assignment (auto-assigned if None) dof (default=111111) : Degrees of freedom constraint (6-digit integer)","title":"Parameters"},{"location":"Boundary/03rlink/#class-attributes","text":"Boundary.RigidLink.links -> List of all rigid link instances.","title":"Class Attributes"},{"location":"Boundary/03rlink/#dof-constraint-format","text":"6-digit format : DXDYDZ RXRYRZ (e.g., 111111 for all DOF, 111000 for translations only) 1 : Constrained (rigid connection) 0 : Free (no constraint)","title":"DOF Constraint Format"},{"location":"Boundary/03rlink/#methods","text":"","title":"Methods"},{"location":"Boundary/03rlink/#json","text":"Returns JSON representation of all rigid links. rlink1 = Boundary . RigidLink ( 1 , [ 2 , 3 ], \"Group1\" , 1 , 111111 ) print ( Boundary . RigidLink . json ())","title":"json"},{"location":"Boundary/03rlink/#create","text":"Sends rigid link data to Civil NX. Boundary . RigidLink . create ()","title":"create"},{"location":"Boundary/03rlink/#get","text":"Fetches rigid link data from Civil NX. print ( Boundary . RigidLink . get ())","title":"get"},{"location":"Boundary/03rlink/#sync","text":"Synchronizes rigid links from Civil NX to Python. Boundary . RigidLink . sync ()","title":"sync"},{"location":"Boundary/03rlink/#delete","text":"Deletes all rigid links from both Python and Civil NX. Boundary . RigidLink . delete ()","title":"delete"},{"location":"Boundary/03rlink/#examples","text":"","title":"Examples"},{"location":"Boundary/03rlink/#single-slave-node","text":"# Create nodes for i in range ( 5 ): Node ( i * 5 , 0 , 0 ) Node . create () # Rigid link between master and single slave rlink1 = Boundary . RigidLink ( 1 , [ 2 ], \"Group1\" , 1 , 111111 ) Boundary . RigidLink . create ()","title":"Single Slave Node"},{"location":"Boundary/03rlink/#multiple-slave-nodes","text":"# Create nodes for i in range ( 5 ): Node ( i * 5 , 0 , 0 ) Node . create () # Rigid link with multiple slave nodes rlink2 = Boundary . RigidLink ( 3 , [ 4 , 5 ], \"Group2\" , 2 , 111111 ) Boundary . RigidLink . create ()","title":"Multiple Slave Nodes"},{"location":"Boundary/03rlink/#partial-dof-constraint","text":"# Create nodes for i in range ( 5 ): Node ( i * 5 , 0 , 0 ) Node . create () # Rigid link with only translational constraints rlink3 = Boundary . RigidLink ( 1 , [ 2 , 3 ], \"Group3\" , 3 , 111000 ) Boundary . RigidLink . create ()","title":"Partial DOF Constraint"},{"location":"Element/","text":"Element The module provides functionality to create, manage, and synchronize structural elements (Beam and Truss) in the model. Note. All the codes below assumes the initial import and MAPI Key definition. from midasapi import * MAPI_KEY ( 'eyJ1ciI6InN1bWl0QG1pZGFzaXQuY29tIiwicGciO252a81571d' ) Constructor To create elements function corresponding to element type should be used. Truss : Element.Truss( ) Beam : Element.Beam( ) Plate : Element.Plate( ) Class Attributes Element.elements -> List of all elements. Node ( 0 , 0 , 0 , id = 1 ) # Create Node at 0,0,0 with ID = 1 Node ( 1 , 1 , 1 , id = 2 ) # Create Node at 1,1,1 with ID = 2 Node ( 2 , 2 , 2 , id = 3 ) # Create Node at 2,2,2 with ID = 3 beam_1 = Element . Beam ( 1 , 2 ) # Create Beam connecting Node 1 and Node 2 (default ID = 1) beam_2 = Element . Truss ( 2 , 3 ) # Create Truss connecting Node 2 and Node 3 (default ID = 2) for elem in Element . elements : print ( f 'ELEM ID = { elem . ID } | TYPE = { elem . TYPE } | NODE = { elem . NODE } ' ) # Output : # ELEM ID = 1 | TYPE = BEAM | NODE = [1, 2] # ELEM ID = 2 | TYPE = TRUSS | NODE = [2, 3] Methods Element. json Returns a JSON representation of all Nodes defined in python. beam_1 = Element . Beam ( 1 , 2 ) # Create Beam connecting Node 1 and Node 2 print ( Element . json ()) # Output : # {'Assign': {1: {'TYPE': 'BEAM', 'MATL': 1, 'SECT': 1, 'NODE': [1, 2], 'ANGLE': 0}}} Element. create Sends the current element list to the Civil NX using a PUT request. New elements are created and existing elements(same ID) in Civil NX will be updated. Node ( 0 , 0 , 0 , id = 1 ) # Create Node at 0,0,0 with ID = 1 Node ( 1 , 1 , 1 , id = 2 ) # Create Node at 1,1,1 with ID = 2 Node ( 2 , 2 , 2 , id = 3 ) # Create Node at 2,2,2 with ID = 3 beam_1 = Element . Beam ( 1 , 2 ) # Create Beam connecting Node 1 and Node 2 (default ID = 1) beam_2 = Element . Beam ( 2 , 3 ) # Create Beam connecting Node 2 and Node 3 (default ID = 2) Element . create () Element. get Fetches elements from the Civil NX and return the JSON representation. -Here, Civil model had 1 beam element print ( Element . get ()) # Output # {'ELEM': {1: {'TYPE': 'BEAM', 'MATL': 1, 'SECT': 1, 'NODE': [1, 2], 'ANGLE': 0}}} Element. sync Retrieves Element data from the Civil NX and rebuilds the internal element list. -Here, Civil model had 1 beam element Element . sync () for elem in Element . elements : print ( f 'ELEM ID = { elem . ID } | TYPE = { elem . TYPE } | NODE = { elem . NODE } ' ) # Output # ELEM ID = 1 | TYPE = BEAM | NODE = [1, 2] Element. delete Deletes all element data from both Python and Civil NX. Element . delete ()","title":"Element"},{"location":"Element/#element","text":"The module provides functionality to create, manage, and synchronize structural elements (Beam and Truss) in the model. Note. All the codes below assumes the initial import and MAPI Key definition. from midasapi import * MAPI_KEY ( 'eyJ1ciI6InN1bWl0QG1pZGFzaXQuY29tIiwicGciO252a81571d' )","title":"Element"},{"location":"Element/#constructor","text":"To create elements function corresponding to element type should be used. Truss : Element.Truss( ) Beam : Element.Beam( ) Plate : Element.Plate( )","title":"Constructor"},{"location":"Element/#class-attributes","text":"Element.elements -> List of all elements. Node ( 0 , 0 , 0 , id = 1 ) # Create Node at 0,0,0 with ID = 1 Node ( 1 , 1 , 1 , id = 2 ) # Create Node at 1,1,1 with ID = 2 Node ( 2 , 2 , 2 , id = 3 ) # Create Node at 2,2,2 with ID = 3 beam_1 = Element . Beam ( 1 , 2 ) # Create Beam connecting Node 1 and Node 2 (default ID = 1) beam_2 = Element . Truss ( 2 , 3 ) # Create Truss connecting Node 2 and Node 3 (default ID = 2) for elem in Element . elements : print ( f 'ELEM ID = { elem . ID } | TYPE = { elem . TYPE } | NODE = { elem . NODE } ' ) # Output : # ELEM ID = 1 | TYPE = BEAM | NODE = [1, 2] # ELEM ID = 2 | TYPE = TRUSS | NODE = [2, 3]","title":"Class Attributes"},{"location":"Element/#methods","text":"","title":"Methods"},{"location":"Element/#elementjson","text":"Returns a JSON representation of all Nodes defined in python. beam_1 = Element . Beam ( 1 , 2 ) # Create Beam connecting Node 1 and Node 2 print ( Element . json ()) # Output : # {'Assign': {1: {'TYPE': 'BEAM', 'MATL': 1, 'SECT': 1, 'NODE': [1, 2], 'ANGLE': 0}}}","title":"Element.json"},{"location":"Element/#elementcreate","text":"Sends the current element list to the Civil NX using a PUT request. New elements are created and existing elements(same ID) in Civil NX will be updated. Node ( 0 , 0 , 0 , id = 1 ) # Create Node at 0,0,0 with ID = 1 Node ( 1 , 1 , 1 , id = 2 ) # Create Node at 1,1,1 with ID = 2 Node ( 2 , 2 , 2 , id = 3 ) # Create Node at 2,2,2 with ID = 3 beam_1 = Element . Beam ( 1 , 2 ) # Create Beam connecting Node 1 and Node 2 (default ID = 1) beam_2 = Element . Beam ( 2 , 3 ) # Create Beam connecting Node 2 and Node 3 (default ID = 2) Element . create ()","title":"Element.create"},{"location":"Element/#elementget","text":"Fetches elements from the Civil NX and return the JSON representation. -Here, Civil model had 1 beam element print ( Element . get ()) # Output # {'ELEM': {1: {'TYPE': 'BEAM', 'MATL': 1, 'SECT': 1, 'NODE': [1, 2], 'ANGLE': 0}}}","title":"Element.get"},{"location":"Element/#elementsync","text":"Retrieves Element data from the Civil NX and rebuilds the internal element list. -Here, Civil model had 1 beam element Element . sync () for elem in Element . elements : print ( f 'ELEM ID = { elem . ID } | TYPE = { elem . TYPE } | NODE = { elem . NODE } ' ) # Output # ELEM ID = 1 | TYPE = BEAM | NODE = [1, 2]","title":"Element.sync"},{"location":"Element/#elementdelete","text":"Deletes all element data from both Python and Civil NX. Element . delete ()","title":"Element.delete"},{"location":"Element/1D/","text":"1D Elements Creation Methods There are three methods available to create 1D elements: Single Element (Main Class) : eg. Truss , Beam Creates one element connecting two nodes by their IDs: i and j . Use this when we know the specific node IDs to connect. Start and End location ( SE method) : eg. Truss.SE , Beam.SE Creates multiple equally spaced elements between a given start and end location. http://localhost:8000/Element/1D/ Start, Direction and Length ( SDL method) : eg. Truss.SDL , Beam.SDL It creates equally divided elements at Start location along the the direction with given total length. TRUSS A nested class within Element used to create truss elements. Attributes ID : Element ID TYPE : Element type = 'TRUSS' MATL : Material ID of the truss element SECT : Section ID of the truss element NODE : Nodes of element in list. eg: [1,2] ANGLE : Beta angle of the truss element To create truss element we have total 3 methods : 1. Truss Element.Truss(i:int, j:int, mat = 1, sect = 1, angle = 0, id = 0) Creates a truss between nodes i and j . Parameters i : Node ID of i-th end j : Node ID of j-th end mat (default=1 : Material ID of the truss element sect (default=1) : Section ID of the truss element angle (default=0) : Beta angle of the truss element id (default=0) : Manually assign an ID. If 0 , ID will be auto-assigned. Examples Node ( 0 , 0 , 0 ) # Create Node at 0,0,0 with ID = 1(default) Node ( 1 , 1 , 1 ) # Create Node at 1,1,1 with ID = 2(default) beam1 = Element . Truss ( 1 , 2 ) # Create Truss connecting Node 1 and Node 2 (default ID = 1) Node . create () Element . create () 2. Truss.SE Element.Truss.SE(s_loc: list, e_loc: list, n: int = 1, mat, sect, angle, id) Creates n truss elements between start and end location. Parameters s_loc : Start location. [x,y,z] e_loc : End location. [x,y,z] n (default=1) : Number of elements mat,sect,angle,id : Same as Element.Truss() method Examples Element . Truss . SE ([ 0 , 0 , 0 ],[ 10 , 0 , 0 ], 10 ) # Create 10 truss between (0,0,0) and (10,0,0) Node . create () Element . create () 3. Truss.SDL Element.Truss.SDL(s_loc: list, dir: list, l: float, n: int = 1, mat, sect, angle, id) Creates n truss elements along a straight line defined by direction dir and length l starting at s_loc . Parameters s_loc : Starting location [x, y, z] dir : Direction vector [dx, dy, dz] l : Total length of element n (default=1) : Number of elements mat,sect,angle,id : Same as Element.Truss() method Examples Element . Truss . SDL ([ 0 , 0 , 0 ],[ 0 , 0 , 1 ], 10 ) # Create a vertical truss of length 10 at (0,0,0) Node . create () Element . create () BEAM A nested class within Element used to create Beam elements. Attributes ID : Element ID TYPE : Element type = 'BEAM' MATL : Material ID of the beam element SECT : Section ID of the beam element NODE : Nodes of element in list. eg: [1,2] ANGLE : Beta angle of the beam element To create Beam element we have total 3 methods : 1. Beam Element.Beam(i:int, j:int, mat = 1, sect = 1, angle = 0, id = 0) Creates a Beam between nodes i and j . Parameters i : Node ID of i-th end j : Node ID of j-th end mat (default=1 : Material ID of the Beam element sect (default=1) : Section ID of the Beam element angle (default=0) : Beta angle of the Beam element id (default=0) : Manually assign an ID. If 0 , ID will be auto-assigned. Examples Node ( 0 , 0 , 0 ) # Create Node at 0,0,0 with ID = 1(default) Node ( 1 , 1 , 1 ) # Create Node at 1,1,1 with ID = 2(default) beam1 = Element . Beam ( 1 , 2 ) # Create Beam connecting Node 1 and Node 2 (default ID = 1) Node . create () Element . create () 2. Beam.SE Element.Beam.SE(s_loc: list, e_loc: list, n: int = 1, mat, sect, angle, id) Creates n Beam elements between start and end location. Parameters s_loc : Start location. [x,y,z] e_loc : End location. [x,y,z] n (default=1) : Number of elements mat,sect,angle,id : Same as Element.Beam() method Examples Element . Beam . SE ([ 0 , 0 , 0 ],[ 10 , 0 , 0 ], 10 ) # Create 10 Beam between (0,0,0) and (10,0,0) Node . create () Element . create () 3. Beam.SDL Element.Beam.SDL(s_loc: list, dir: list, l: float, n: int = 1, mat, sect, angle, id) Creates n Beam elements along a straight line defined by direction dir and length l starting at s_loc . Parameters s_loc : Starting location [x, y, z] dir : Direction vector [dx, dy, dz] l : Total length of element n (default=1) : Number of elements mat,sect,angle,id : Same as Element.Beam() method Examples Element . Beam . SDL ([ 0 , 0 , 0 ],[ 0 , 0 , 1 ], 10 ) # Create a vertical beam of length 10 at (0,0,0) Node . create () Element . create () Examples 1. Portal Frame h = 3.5 # Height of each storey w = 4.0 # Width of each Bay n_storey = 10 # Total no. of storey n_bay = 5 # Total no. of bay for i in range ( n_bay + 1 ): for j in range ( n_storey ): if i != n_bay : Element . Beam . SDL ([ i * w , 0 , j * h ],[ 0 , 0 , 1 ], h , sect = 1 ) # Column -> Sect ID = 1 Element . Beam . SDL ([ i * w , 0 ,( j + 1 ) * h ],[ 1 , 0 , 0 ], w , sect = 5 ) # Beam -> Sect ID = 5 else : Element . Beam . SDL ([ i * w , 0 , j * h ],[ 0 , 0 , 1 ], h , sect = 1 ) # Column -> Sect ID = 1 Node . create () Element . create () 2. Warren Truss span = 20.5 # Span of truss n_div = 8 # No. of bottom divisions h = 2.5 # Height of truss dx = 0.5 * span / n_div Element . Truss . SDL ([ 0 , 0 , 0 ],[ 1 , 0 , 0 ], span , n_div ) Element . Truss . SDL ([ dx , 0 , h ],[ 1 , 0 , 0 ], span - 2 * dx , n_div - 1 ) for i in range ( n_div ): Element . Truss ( i + 1 , i + 2 + n_div ) Element . Truss ( i + 2 , i + 2 + n_div ) Node . create () Element . create ()","title":"\u200e \u200e \u200e 1D Elements"},{"location":"Element/1D/#1d-elements","text":"","title":"1D Elements"},{"location":"Element/1D/#creation-methods","text":"There are three methods available to create 1D elements: Single Element (Main Class) : eg. Truss , Beam Creates one element connecting two nodes by their IDs: i and j . Use this when we know the specific node IDs to connect. Start and End location ( SE method) : eg. Truss.SE , Beam.SE Creates multiple equally spaced elements between a given start and end location. http://localhost:8000/Element/1D/ Start, Direction and Length ( SDL method) : eg. Truss.SDL , Beam.SDL It creates equally divided elements at Start location along the the direction with given total length.","title":"Creation Methods"},{"location":"Element/1D/#truss","text":"A nested class within Element used to create truss elements.","title":"TRUSS"},{"location":"Element/1D/#attributes","text":"ID : Element ID TYPE : Element type = 'TRUSS' MATL : Material ID of the truss element SECT : Section ID of the truss element NODE : Nodes of element in list. eg: [1,2] ANGLE : Beta angle of the truss element To create truss element we have total 3 methods :","title":"Attributes"},{"location":"Element/1D/#1-truss","text":"Element.Truss(i:int, j:int, mat = 1, sect = 1, angle = 0, id = 0) Creates a truss between nodes i and j .","title":"1. Truss"},{"location":"Element/1D/#parameters","text":"i : Node ID of i-th end j : Node ID of j-th end mat (default=1 : Material ID of the truss element sect (default=1) : Section ID of the truss element angle (default=0) : Beta angle of the truss element id (default=0) : Manually assign an ID. If 0 , ID will be auto-assigned.","title":"Parameters"},{"location":"Element/1D/#examples","text":"Node ( 0 , 0 , 0 ) # Create Node at 0,0,0 with ID = 1(default) Node ( 1 , 1 , 1 ) # Create Node at 1,1,1 with ID = 2(default) beam1 = Element . Truss ( 1 , 2 ) # Create Truss connecting Node 1 and Node 2 (default ID = 1) Node . create () Element . create ()","title":"Examples"},{"location":"Element/1D/#2-trussse","text":"Element.Truss.SE(s_loc: list, e_loc: list, n: int = 1, mat, sect, angle, id) Creates n truss elements between start and end location.","title":"2. Truss.SE"},{"location":"Element/1D/#parameters_1","text":"s_loc : Start location. [x,y,z] e_loc : End location. [x,y,z] n (default=1) : Number of elements mat,sect,angle,id : Same as Element.Truss() method","title":"Parameters"},{"location":"Element/1D/#examples_1","text":"Element . Truss . SE ([ 0 , 0 , 0 ],[ 10 , 0 , 0 ], 10 ) # Create 10 truss between (0,0,0) and (10,0,0) Node . create () Element . create ()","title":"Examples"},{"location":"Element/1D/#3-trusssdl","text":"Element.Truss.SDL(s_loc: list, dir: list, l: float, n: int = 1, mat, sect, angle, id) Creates n truss elements along a straight line defined by direction dir and length l starting at s_loc .","title":"3. Truss.SDL"},{"location":"Element/1D/#parameters_2","text":"s_loc : Starting location [x, y, z] dir : Direction vector [dx, dy, dz] l : Total length of element n (default=1) : Number of elements mat,sect,angle,id : Same as Element.Truss() method","title":"Parameters"},{"location":"Element/1D/#examples_2","text":"Element . Truss . SDL ([ 0 , 0 , 0 ],[ 0 , 0 , 1 ], 10 ) # Create a vertical truss of length 10 at (0,0,0) Node . create () Element . create ()","title":"Examples"},{"location":"Element/1D/#beam","text":"A nested class within Element used to create Beam elements.","title":"BEAM"},{"location":"Element/1D/#attributes_1","text":"ID : Element ID TYPE : Element type = 'BEAM' MATL : Material ID of the beam element SECT : Section ID of the beam element NODE : Nodes of element in list. eg: [1,2] ANGLE : Beta angle of the beam element To create Beam element we have total 3 methods :","title":"Attributes"},{"location":"Element/1D/#1-beam","text":"Element.Beam(i:int, j:int, mat = 1, sect = 1, angle = 0, id = 0) Creates a Beam between nodes i and j .","title":"1. Beam"},{"location":"Element/1D/#parameters_3","text":"i : Node ID of i-th end j : Node ID of j-th end mat (default=1 : Material ID of the Beam element sect (default=1) : Section ID of the Beam element angle (default=0) : Beta angle of the Beam element id (default=0) : Manually assign an ID. If 0 , ID will be auto-assigned.","title":"Parameters"},{"location":"Element/1D/#examples_3","text":"Node ( 0 , 0 , 0 ) # Create Node at 0,0,0 with ID = 1(default) Node ( 1 , 1 , 1 ) # Create Node at 1,1,1 with ID = 2(default) beam1 = Element . Beam ( 1 , 2 ) # Create Beam connecting Node 1 and Node 2 (default ID = 1) Node . create () Element . create ()","title":"Examples"},{"location":"Element/1D/#2-beamse","text":"Element.Beam.SE(s_loc: list, e_loc: list, n: int = 1, mat, sect, angle, id) Creates n Beam elements between start and end location.","title":"2. Beam.SE"},{"location":"Element/1D/#parameters_4","text":"s_loc : Start location. [x,y,z] e_loc : End location. [x,y,z] n (default=1) : Number of elements mat,sect,angle,id : Same as Element.Beam() method","title":"Parameters"},{"location":"Element/1D/#examples_4","text":"Element . Beam . SE ([ 0 , 0 , 0 ],[ 10 , 0 , 0 ], 10 ) # Create 10 Beam between (0,0,0) and (10,0,0) Node . create () Element . create ()","title":"Examples"},{"location":"Element/1D/#3-beamsdl","text":"Element.Beam.SDL(s_loc: list, dir: list, l: float, n: int = 1, mat, sect, angle, id) Creates n Beam elements along a straight line defined by direction dir and length l starting at s_loc .","title":"3. Beam.SDL"},{"location":"Element/1D/#parameters_5","text":"s_loc : Starting location [x, y, z] dir : Direction vector [dx, dy, dz] l : Total length of element n (default=1) : Number of elements mat,sect,angle,id : Same as Element.Beam() method","title":"Parameters"},{"location":"Element/1D/#examples_5","text":"Element . Beam . SDL ([ 0 , 0 , 0 ],[ 0 , 0 , 1 ], 10 ) # Create a vertical beam of length 10 at (0,0,0) Node . create () Element . create ()","title":"Examples"},{"location":"Element/1D/#examples_6","text":"","title":"Examples"},{"location":"Element/1D/#1-portal-frame","text":"h = 3.5 # Height of each storey w = 4.0 # Width of each Bay n_storey = 10 # Total no. of storey n_bay = 5 # Total no. of bay for i in range ( n_bay + 1 ): for j in range ( n_storey ): if i != n_bay : Element . Beam . SDL ([ i * w , 0 , j * h ],[ 0 , 0 , 1 ], h , sect = 1 ) # Column -> Sect ID = 1 Element . Beam . SDL ([ i * w , 0 ,( j + 1 ) * h ],[ 1 , 0 , 0 ], w , sect = 5 ) # Beam -> Sect ID = 5 else : Element . Beam . SDL ([ i * w , 0 , j * h ],[ 0 , 0 , 1 ], h , sect = 1 ) # Column -> Sect ID = 1 Node . create () Element . create ()","title":"1. Portal Frame"},{"location":"Element/1D/#2-warren-truss","text":"span = 20.5 # Span of truss n_div = 8 # No. of bottom divisions h = 2.5 # Height of truss dx = 0.5 * span / n_div Element . Truss . SDL ([ 0 , 0 , 0 ],[ 1 , 0 , 0 ], span , n_div ) Element . Truss . SDL ([ dx , 0 , h ],[ 1 , 0 , 0 ], span - 2 * dx , n_div - 1 ) for i in range ( n_div ): Element . Truss ( i + 1 , i + 2 + n_div ) Element . Truss ( i + 2 , i + 2 + n_div ) Node . create () Element . create ()","title":"2. Warren Truss"},{"location":"Element/2D/","text":"2D Elements PLATE A nested class within Element used to create Plate elements. Attributes ID : Element ID TYPE : Element type = 'PLATE' MATL : Material ID of the beam element SECT : Section ID of the beam element NODE : Nodes of element in list. eg: [1,2,3,4] ANGLE : Beta angle of the beam element STYPE : Type of Plate element \u2003\u2003\u2003\u20031 : Thick | 2 : Thin | 3 : Thick w Drilling dof | 4 : Thin w Drilling dof Constructor Element.Plate(nodes:list, stype:int=1, mat = 1, sect = 1, angle = 0, id = 0) Creates a Plate element. Parameters node : Nodes of the Plate element stype (default=3) : Sub Type of Plate element \u2003\u2003\u2003\u2003 1 : Thick | 2 : Thin | 3 : Thick w Drilling dof | 4 : Thin w Drilling dof mat (default=1) : Material ID of the Plate element sect (default=1) : Thickness ID of the Plate element angle (default=0) : Beta angle of the Plate element id (default=0) : Manually assign an ID. If 0 , ID will be auto-assigned. Examples Node ( 0 , 0 , 0 ) Node ( 1 , 0 , 0 ) Node ( 1 , 1 , 0 ) Node ( 0 , 1 , 0 ) Element . Plate ([ 1 , 2 , 3 , 4 ]) Node . create () Element . create () Examples 1. Silo import math R_top = 5.0 # Radius at the top of Silo R_bot = 2.5 # Radius at the bottom of Silo < R_top H_tot = 20.0 # Total height of Silo H_tap = 5 # Height of tapered portion < H_tot nR = 32 # Sides of cylinder nH = 20 # Divisions along height for q in range ( nH + 1 ): for i in range ( nR ): theta = i * 2 * math . pi / nR R = min ( R_top , R_bot + q * H_tot / nH * ( R_top - R_bot ) / ( H_tap )) Node ( R * math . sin ( theta ), R * math . cos ( theta ), q * H_tot / nH ) for q in range ( nH ): n_list = list ( range ( q * nR + 1 ,( q + 1 ) * nR + 1 )) for i in range ( nR ): n1 = n_list [ i ] n2 = n_list [( i + 1 ) % nR ] Element . Plate ([ n1 , n2 , n2 + nR , n1 + nR ]) Node . create () Element . create ()","title":"\u200e \u200e \u200e 2D Elements"},{"location":"Element/2D/#2d-elements","text":"","title":"2D Elements"},{"location":"Element/2D/#plate","text":"A nested class within Element used to create Plate elements.","title":"PLATE"},{"location":"Element/2D/#attributes","text":"ID : Element ID TYPE : Element type = 'PLATE' MATL : Material ID of the beam element SECT : Section ID of the beam element NODE : Nodes of element in list. eg: [1,2,3,4] ANGLE : Beta angle of the beam element STYPE : Type of Plate element \u2003\u2003\u2003\u20031 : Thick | 2 : Thin | 3 : Thick w Drilling dof | 4 : Thin w Drilling dof","title":"Attributes"},{"location":"Element/2D/#constructor","text":"Element.Plate(nodes:list, stype:int=1, mat = 1, sect = 1, angle = 0, id = 0) Creates a Plate element.","title":"Constructor"},{"location":"Element/2D/#parameters","text":"node : Nodes of the Plate element stype (default=3) : Sub Type of Plate element \u2003\u2003\u2003\u2003 1 : Thick | 2 : Thin | 3 : Thick w Drilling dof | 4 : Thin w Drilling dof mat (default=1) : Material ID of the Plate element sect (default=1) : Thickness ID of the Plate element angle (default=0) : Beta angle of the Plate element id (default=0) : Manually assign an ID. If 0 , ID will be auto-assigned.","title":"Parameters"},{"location":"Element/2D/#examples","text":"Node ( 0 , 0 , 0 ) Node ( 1 , 0 , 0 ) Node ( 1 , 1 , 0 ) Node ( 0 , 1 , 0 ) Element . Plate ([ 1 , 2 , 3 , 4 ]) Node . create () Element . create ()","title":"Examples"},{"location":"Element/2D/#examples_1","text":"","title":"Examples"},{"location":"Element/2D/#1-silo","text":"import math R_top = 5.0 # Radius at the top of Silo R_bot = 2.5 # Radius at the bottom of Silo < R_top H_tot = 20.0 # Total height of Silo H_tap = 5 # Height of tapered portion < H_tot nR = 32 # Sides of cylinder nH = 20 # Divisions along height for q in range ( nH + 1 ): for i in range ( nR ): theta = i * 2 * math . pi / nR R = min ( R_top , R_bot + q * H_tot / nH * ( R_top - R_bot ) / ( H_tap )) Node ( R * math . sin ( theta ), R * math . cos ( theta ), q * H_tot / nH ) for q in range ( nH ): n_list = list ( range ( q * nR + 1 ,( q + 1 ) * nR + 1 )) for i in range ( nR ): n1 = n_list [ i ] n2 = n_list [( i + 1 ) % nR ] Element . Plate ([ n1 , n2 , n2 + nR , n1 + nR ]) Node . create () Element . create ()","title":"1. Silo"},{"location":"Group/","text":"Group The module provides functionality to create, manage, and synchronize different types of groups (Structure, Boundary, Load, and Tendon groups) in the model. Note. All the codes below assumes the initial import and MAPI Key definition. from midasapi import * MAPI_KEY ( 'eyJ1ciI6InN1bWl0QG1pZGFzaXQuY29tIiwicGciO252k81571d' ) Group Class The Group class provides a unified interface to create different types of groups and includes nested classes for specific group types. Methods Group. create Creates all defined groups (Structure, Boundary, Load, and Tendon groups) in Civil NX. Group . create () Group. sync Synchronizes all group types from Civil NX and rebuilds internal group lists. Group . sync () Group. delete Deletes all group data from both Python and Civil NX. Group . delete () Complete Example from midasapi import * MAPI_KEY ( \"eyJ1ciI6IklOMjQwN0ZZVDIiLCJwZyI6ImNpdmlsIiwi\" ) # Paste your Mapi Key # Create nodes and elements for i in range ( 6 ): Node ( i * 5 , 0 , 0 ) Node . create () for i in range ( 5 ): Element . Beam ( i + 1 , i + 2 ) Element . create () # Create Structure Groups Group . Structure ( \"Main Span\" , nlist = [ 1 , 2 , 3 , 4 ], elist = [ 1 , 2 , 3 ]) Group . Structure ( \"Side Span\" , nlist = [ 4 , 5 , 6 ], elist = [ 4 , 5 ]) # Update structure group Group . Structure . update ( \"Main Span\" , \"a\" , nlist = [ 5 ], elist = []) # Create other group types Group . Boundary ( \"Support Boundary\" ) Group . Boundary ( \"Expansion Joint\" ) Group . Load ( \"Dead Load Group\" ) Group . Load ( \"Live Load Group\" ) Group . Tendon ( \"PT Cable Group 1\" ) Group . Tendon ( \"PT Cable Group 2\" ) # Create all groups in Civil NX Group . create () # Display group information print ( \"Structure Groups:\" ) for sg in Group . Structure . Groups : print ( f ' { sg . NAME } : Nodes= { sg . NLIST } , Elements= { sg . ELIST } ' ) print ( \" \\n Boundary Groups:\" ) for bg in Group . Boundary . Groups : print ( f ' { bg . NAME } ' ) print ( \" \\n Load Groups:\" ) for lg in Group . Load . Groups : print ( f ' { lg . NAME } ' ) print ( \" \\n Tendon Groups:\" ) for tg in Group . Tendon . Groups : print ( f ' { tg . NAME } ' )","title":"Group"},{"location":"Group/#group","text":"The module provides functionality to create, manage, and synchronize different types of groups (Structure, Boundary, Load, and Tendon groups) in the model. Note. All the codes below assumes the initial import and MAPI Key definition. from midasapi import * MAPI_KEY ( 'eyJ1ciI6InN1bWl0QG1pZGFzaXQuY29tIiwicGciO252k81571d' )","title":"Group"},{"location":"Group/#group-class","text":"The Group class provides a unified interface to create different types of groups and includes nested classes for specific group types.","title":"Group Class"},{"location":"Group/#methods","text":"","title":"Methods"},{"location":"Group/#groupcreate","text":"Creates all defined groups (Structure, Boundary, Load, and Tendon groups) in Civil NX. Group . create ()","title":"Group.create"},{"location":"Group/#groupsync","text":"Synchronizes all group types from Civil NX and rebuilds internal group lists. Group . sync ()","title":"Group.sync"},{"location":"Group/#groupdelete","text":"Deletes all group data from both Python and Civil NX. Group . delete ()","title":"Group.delete"},{"location":"Group/#complete-example","text":"from midasapi import * MAPI_KEY ( \"eyJ1ciI6IklOMjQwN0ZZVDIiLCJwZyI6ImNpdmlsIiwi\" ) # Paste your Mapi Key # Create nodes and elements for i in range ( 6 ): Node ( i * 5 , 0 , 0 ) Node . create () for i in range ( 5 ): Element . Beam ( i + 1 , i + 2 ) Element . create () # Create Structure Groups Group . Structure ( \"Main Span\" , nlist = [ 1 , 2 , 3 , 4 ], elist = [ 1 , 2 , 3 ]) Group . Structure ( \"Side Span\" , nlist = [ 4 , 5 , 6 ], elist = [ 4 , 5 ]) # Update structure group Group . Structure . update ( \"Main Span\" , \"a\" , nlist = [ 5 ], elist = []) # Create other group types Group . Boundary ( \"Support Boundary\" ) Group . Boundary ( \"Expansion Joint\" ) Group . Load ( \"Dead Load Group\" ) Group . Load ( \"Live Load Group\" ) Group . Tendon ( \"PT Cable Group 1\" ) Group . Tendon ( \"PT Cable Group 2\" ) # Create all groups in Civil NX Group . create () # Display group information print ( \"Structure Groups:\" ) for sg in Group . Structure . Groups : print ( f ' { sg . NAME } : Nodes= { sg . NLIST } , Elements= { sg . ELIST } ' ) print ( \" \\n Boundary Groups:\" ) for bg in Group . Boundary . Groups : print ( f ' { bg . NAME } ' ) print ( \" \\n Load Groups:\" ) for lg in Group . Load . Groups : print ( f ' { lg . NAME } ' ) print ( \" \\n Tendon Groups:\" ) for tg in Group . Tendon . Groups : print ( f ' { tg . NAME } ' )","title":"Complete Example"},{"location":"Group/001sg/","text":"STRUCTURE GROUPS A nested class within Group used to create and manage structure groups containing nodes and elements. Constructor Group.Structure(name, nlist=[], elist=[]) Creates a structure group with specified name and optional node/element lists. Parameters name : Name of the structure group nlist (default=[]) : List of node IDs to include in the group elist (default=[]) : List of element IDs to include in the group Class Attributes Group.Structure.Groups -> List of all structure groups. Methods Group.Structure. update Updates an existing structure group with new node/element lists. Group.Structure.update(name, operation=\"r\", nlist=[], elist=[]) Parameters name : Name of the group to update operation (default=\"r\") : Operation type (\"r\" for replace, \"a\" for add) nlist (default=[]) : List of node IDs elist (default=[]) : List of element IDs # Replace existing lists Group . Structure . update ( \"Main Girder\" , \"r\" , nlist = [ 1 , 2 , 3 , 4 ], elist = [ 1 , 2 , 3 ]) # Add to existing lists Group . Structure . update ( \"Main Girder\" , \"a\" , nlist = [ 5 ], elist = [ 4 ]) Group.Structure. json Returns a JSON representation of all Structure Groups defined in python. sg1 = Group . Structure ( \"Main Girder\" , nlist = [ 1 , 2 ], elist = [ 1 ]) print ( Group . Structure . json ()) # Output: # {'Assign': {1: {'NAME': 'Main Girder', 'P_TYPE': 0, 'N_LIST': [1, 2], 'E_LIST': [1]}}} Group.Structure. create Sends the current structure group list to Civil NX using a PUT request. Group . Structure . create () Group.Structure. get Fetches structure groups from Civil NX and returns the JSON representation. print ( Group . Structure . get ()) Group.Structure. sync Retrieves Structure Group data from Civil NX and rebuilds the internal group list. Group . Structure . sync () for sg in Group . Structure . Groups : print ( f 'Structure Group: { sg . NAME } | Nodes: { sg . NLIST } | Elements: { sg . ELIST } ' ) Group.Structure. delete Deletes all structure group data from both Python and Civil NX. Group . Structure . delete () Examples # Create nodes and elements first for i in range ( 3 ): Node ( i * 10 , 0 , 0 ) Node . create () Element . Beam ( 1 , 2 ) Element . Beam ( 2 , 3 ) Element . create () # Create structure groups sg1 = Group . Structure ( \"Main Girder\" , nlist = [ 1 , 2 , 3 ], elist = [ 1 , 2 ]) sg2 = Group . Structure ( \"Secondary\" , nlist = [ 1 ], elist = [ 1 ]) for sg in Group . Structure . Groups : print ( f 'Group ID: { sg . ID } | Name: { sg . NAME } | Nodes: { sg . NLIST } | Elements: { sg . ELIST } ' ) # Output: # Group ID: 1 | Name: Main Girder | Nodes: [1, 2, 3] | Elements: [1, 2] # Group ID: 2 | Name: Secondary | Nodes: [1] | Elements: [1]","title":"\u200e \u200e \u200e Structure Group"},{"location":"Group/001sg/#structure-groups","text":"A nested class within Group used to create and manage structure groups containing nodes and elements.","title":"STRUCTURE GROUPS"},{"location":"Group/001sg/#constructor","text":"Group.Structure(name, nlist=[], elist=[]) Creates a structure group with specified name and optional node/element lists.","title":"Constructor"},{"location":"Group/001sg/#parameters","text":"name : Name of the structure group nlist (default=[]) : List of node IDs to include in the group elist (default=[]) : List of element IDs to include in the group","title":"Parameters"},{"location":"Group/001sg/#class-attributes","text":"Group.Structure.Groups -> List of all structure groups.","title":"Class Attributes"},{"location":"Group/001sg/#methods","text":"","title":"Methods"},{"location":"Group/001sg/#groupstructureupdate","text":"Updates an existing structure group with new node/element lists. Group.Structure.update(name, operation=\"r\", nlist=[], elist=[])","title":"Group.Structure.update"},{"location":"Group/001sg/#parameters_1","text":"name : Name of the group to update operation (default=\"r\") : Operation type (\"r\" for replace, \"a\" for add) nlist (default=[]) : List of node IDs elist (default=[]) : List of element IDs # Replace existing lists Group . Structure . update ( \"Main Girder\" , \"r\" , nlist = [ 1 , 2 , 3 , 4 ], elist = [ 1 , 2 , 3 ]) # Add to existing lists Group . Structure . update ( \"Main Girder\" , \"a\" , nlist = [ 5 ], elist = [ 4 ])","title":"Parameters"},{"location":"Group/001sg/#groupstructurejson","text":"Returns a JSON representation of all Structure Groups defined in python. sg1 = Group . Structure ( \"Main Girder\" , nlist = [ 1 , 2 ], elist = [ 1 ]) print ( Group . Structure . json ()) # Output: # {'Assign': {1: {'NAME': 'Main Girder', 'P_TYPE': 0, 'N_LIST': [1, 2], 'E_LIST': [1]}}}","title":"Group.Structure.json"},{"location":"Group/001sg/#groupstructurecreate","text":"Sends the current structure group list to Civil NX using a PUT request. Group . Structure . create ()","title":"Group.Structure.create"},{"location":"Group/001sg/#groupstructureget","text":"Fetches structure groups from Civil NX and returns the JSON representation. print ( Group . Structure . get ())","title":"Group.Structure.get"},{"location":"Group/001sg/#groupstructuresync","text":"Retrieves Structure Group data from Civil NX and rebuilds the internal group list. Group . Structure . sync () for sg in Group . Structure . Groups : print ( f 'Structure Group: { sg . NAME } | Nodes: { sg . NLIST } | Elements: { sg . ELIST } ' )","title":"Group.Structure.sync"},{"location":"Group/001sg/#groupstructuredelete","text":"Deletes all structure group data from both Python and Civil NX. Group . Structure . delete ()","title":"Group.Structure.delete"},{"location":"Group/001sg/#examples","text":"# Create nodes and elements first for i in range ( 3 ): Node ( i * 10 , 0 , 0 ) Node . create () Element . Beam ( 1 , 2 ) Element . Beam ( 2 , 3 ) Element . create () # Create structure groups sg1 = Group . Structure ( \"Main Girder\" , nlist = [ 1 , 2 , 3 ], elist = [ 1 , 2 ]) sg2 = Group . Structure ( \"Secondary\" , nlist = [ 1 ], elist = [ 1 ]) for sg in Group . Structure . Groups : print ( f 'Group ID: { sg . ID } | Name: { sg . NAME } | Nodes: { sg . NLIST } | Elements: { sg . ELIST } ' ) # Output: # Group ID: 1 | Name: Main Girder | Nodes: [1, 2, 3] | Elements: [1, 2] # Group ID: 2 | Name: Secondary | Nodes: [1] | Elements: [1]","title":"Examples"},{"location":"Group/002bg/","text":"BOUNDARY GROUPS A nested class within Group used to create and manage boundary groups. Constructor Group.Boundary(name) Creates a boundary group with specified name. Parameters name : Name of the boundary group Class Attributes Group.Boundary.Groups -> List of all boundary groups. Methods json Returns JSON representation of all boundary groups. bg1 = Group . Boundary ( \"Support Group\" ) print ( Group . Boundary . json ()) # Output: # {'Assign': {1: {'NAME': 'Support Group', 'AUTOTYPE': 0}}} create Sends boundary groups to Civil NX. Group . Boundary . create () get Fetches boundary groups from Civil NX. print ( Group . Boundary . get ()) sync Synchronizes boundary groups from Civil NX. Group . Boundary . sync () delete Deletes all boundary groups from both Python and Civil NX. Group . Boundary . delete () Examples # Create boundary groups bg1 = Group . Boundary ( \"Support Group\" ) bg2 = Group . Boundary ( \"Fixed Ends\" ) for bg in Group . Boundary . Groups : print ( f 'Boundary Group ID: { bg . ID } | Name: { bg . NAME } ' ) # Output: # Boundary Group ID: 1 | Name: Support Group # Boundary Group ID: 2 | Name: Fixed Ends","title":"\u200e \u200e \u200e Boundary Group"},{"location":"Group/002bg/#boundary-groups","text":"A nested class within Group used to create and manage boundary groups.","title":"BOUNDARY GROUPS"},{"location":"Group/002bg/#constructor","text":"Group.Boundary(name) Creates a boundary group with specified name.","title":"Constructor"},{"location":"Group/002bg/#parameters","text":"name : Name of the boundary group","title":"Parameters"},{"location":"Group/002bg/#class-attributes","text":"Group.Boundary.Groups -> List of all boundary groups.","title":"Class Attributes"},{"location":"Group/002bg/#methods","text":"","title":"Methods"},{"location":"Group/002bg/#json","text":"Returns JSON representation of all boundary groups. bg1 = Group . Boundary ( \"Support Group\" ) print ( Group . Boundary . json ()) # Output: # {'Assign': {1: {'NAME': 'Support Group', 'AUTOTYPE': 0}}}","title":"json"},{"location":"Group/002bg/#create","text":"Sends boundary groups to Civil NX. Group . Boundary . create ()","title":"create"},{"location":"Group/002bg/#get","text":"Fetches boundary groups from Civil NX. print ( Group . Boundary . get ())","title":"get"},{"location":"Group/002bg/#sync","text":"Synchronizes boundary groups from Civil NX. Group . Boundary . sync ()","title":"sync"},{"location":"Group/002bg/#delete","text":"Deletes all boundary groups from both Python and Civil NX. Group . Boundary . delete ()","title":"delete"},{"location":"Group/002bg/#examples","text":"# Create boundary groups bg1 = Group . Boundary ( \"Support Group\" ) bg2 = Group . Boundary ( \"Fixed Ends\" ) for bg in Group . Boundary . Groups : print ( f 'Boundary Group ID: { bg . ID } | Name: { bg . NAME } ' ) # Output: # Boundary Group ID: 1 | Name: Support Group # Boundary Group ID: 2 | Name: Fixed Ends","title":"Examples"},{"location":"Group/003lg/","text":"LOAD GROUPS A nested class within Group used to create and manage load groups. Constructor Group.Load(name) Creates a load group with specified name. Parameters name : Name of the load group Class Attributes Group.Load.Groups -> List of all load groups. Methods json Returns JSON representation of all load groups. lg1 = Group . Load ( \"Dead Load Group\" ) print ( Group . Load . json ()) # Output: # {'Assign': {1: {'NAME': 'Dead Load Group'}}} create Sends load groups to Civil NX. Group . Load . create () get Fetches load groups from Civil NX. print ( Group . Load . get ()) sync Synchronizes load groups from Civil NX. Group . Load . sync () delete Deletes all load groups from both Python and Civil NX. Group . Load . delete () Examples # Create load groups lg1 = Group . Load ( \"Dead Load Group\" ) lg2 = Group . Load ( \"Live Load Group\" ) for lg in Group . Load . Groups : print ( f 'Load Group ID: { lg . ID } | Name: { lg . NAME } ' ) # Output: # Load Group ID: 1 | Name: Dead Load Group # Load Group ID: 2 | Name: Live Load Group","title":"\u200e \u200e \u200e Load Group"},{"location":"Group/003lg/#load-groups","text":"A nested class within Group used to create and manage load groups.","title":"LOAD GROUPS"},{"location":"Group/003lg/#constructor","text":"Group.Load(name) Creates a load group with specified name.","title":"Constructor"},{"location":"Group/003lg/#parameters","text":"name : Name of the load group","title":"Parameters"},{"location":"Group/003lg/#class-attributes","text":"Group.Load.Groups -> List of all load groups.","title":"Class Attributes"},{"location":"Group/003lg/#methods","text":"","title":"Methods"},{"location":"Group/003lg/#json","text":"Returns JSON representation of all load groups. lg1 = Group . Load ( \"Dead Load Group\" ) print ( Group . Load . json ()) # Output: # {'Assign': {1: {'NAME': 'Dead Load Group'}}}","title":"json"},{"location":"Group/003lg/#create","text":"Sends load groups to Civil NX. Group . Load . create ()","title":"create"},{"location":"Group/003lg/#get","text":"Fetches load groups from Civil NX. print ( Group . Load . get ())","title":"get"},{"location":"Group/003lg/#sync","text":"Synchronizes load groups from Civil NX. Group . Load . sync ()","title":"sync"},{"location":"Group/003lg/#delete","text":"Deletes all load groups from both Python and Civil NX. Group . Load . delete ()","title":"delete"},{"location":"Group/003lg/#examples","text":"# Create load groups lg1 = Group . Load ( \"Dead Load Group\" ) lg2 = Group . Load ( \"Live Load Group\" ) for lg in Group . Load . Groups : print ( f 'Load Group ID: { lg . ID } | Name: { lg . NAME } ' ) # Output: # Load Group ID: 1 | Name: Dead Load Group # Load Group ID: 2 | Name: Live Load Group","title":"Examples"},{"location":"Group/004tg/","text":"TENDON GROUPS A nested class within Group used to create and manage tendon groups. Constructor Group.Tendon(name) Creates a tendon group with specified name. Parameters name : Name of the tendon group Class Attributes Group.Tendon.Groups -> List of all tendon groups. Methods json Returns JSON representation of all tendon groups. tg1 = Group . Tendon ( \"PT Group 1\" ) print ( Group . Tendon . json ()) # Output: # {'Assign': {1: {'NAME': 'PT Group 1'}}} create Sends tendon groups to Civil NX. Group . Tendon . create () get Fetches tendon groups from Civil NX. print ( Group . Tendon . get ()) sync Synchronizes tendon groups from Civil NX. Group . Tendon . sync () delete Deletes all tendon groups from both Python and Civil NX. Group . Tendon . delete () Examples # Create tendon groups tg1 = Group . Tendon ( \"PT Group 1\" ) tg2 = Group . Tendon ( \"PT Group 2\" ) for tg in Group . Tendon . Groups : print ( f 'Tendon Group ID: { tg . ID } | Name: { tg . NAME } ' ) # Output: # Tendon Group ID: 1 | Name: PT Group 1 # Tendon Group ID: 2 | Name: PT Group 2","title":"\u200e \u200e \u200e Tendon Group"},{"location":"Group/004tg/#tendon-groups","text":"A nested class within Group used to create and manage tendon groups.","title":"TENDON GROUPS"},{"location":"Group/004tg/#constructor","text":"Group.Tendon(name) Creates a tendon group with specified name.","title":"Constructor"},{"location":"Group/004tg/#parameters","text":"name : Name of the tendon group","title":"Parameters"},{"location":"Group/004tg/#class-attributes","text":"Group.Tendon.Groups -> List of all tendon groups.","title":"Class Attributes"},{"location":"Group/004tg/#methods","text":"","title":"Methods"},{"location":"Group/004tg/#json","text":"Returns JSON representation of all tendon groups. tg1 = Group . Tendon ( \"PT Group 1\" ) print ( Group . Tendon . json ()) # Output: # {'Assign': {1: {'NAME': 'PT Group 1'}}}","title":"json"},{"location":"Group/004tg/#create","text":"Sends tendon groups to Civil NX. Group . Tendon . create ()","title":"create"},{"location":"Group/004tg/#get","text":"Fetches tendon groups from Civil NX. print ( Group . Tendon . get ())","title":"get"},{"location":"Group/004tg/#sync","text":"Synchronizes tendon groups from Civil NX. Group . Tendon . sync ()","title":"sync"},{"location":"Group/004tg/#delete","text":"Deletes all tendon groups from both Python and Civil NX. Group . Tendon . delete ()","title":"delete"},{"location":"Group/004tg/#examples","text":"# Create tendon groups tg1 = Group . Tendon ( \"PT Group 1\" ) tg2 = Group . Tendon ( \"PT Group 2\" ) for tg in Group . Tendon . Groups : print ( f 'Tendon Group ID: { tg . ID } | Name: { tg . NAME } ' ) # Output: # Tendon Group ID: 1 | Name: PT Group 1 # Tendon Group ID: 2 | Name: PT Group 2","title":"Examples"},{"location":"Load/","text":"Load The Load class provides a unified interface to create different types of loads and includes nested classes for specific load types. Methods create Creates all defined load cases and loads (Self-Weight, Nodal, and Beam loads) in Civil NX. Load . create () Complete Example from midasapi import * MAPI_KEY ( \"eyJ1ciI6IklOMjQwN0ZZVDIiLCJwZyI6ImNpdmlsIiwi\" ) #Paste your Mapi Key for j in range ( 6 ): for i in range ( 2 ): Node ( i * 10 , j * 2 , 0 ) Node . create () j = 0 for k in range ( 6 ): for i in range ( 1 , 2 ): Element . Beam ( i + j , i + 1 + j ) Element . create () j = j + 2 #Load Case Load_Case ( \"D\" , \"SW\" ) Load_Case ( \"L\" , \"Nodal Load\" ) Load_Case ( \"USER\" , \"Test Load 1\" , \"Test Load 2\" , \"Test Load 3\" , \"Test Load 4\" , \"Test Load 5\" , \"Test Load 6\" ) Load_Case . create () #Create Load Case in Civil NX #Self Weight Load Load . SW ( \"SW\" , \"Z\" , - 1 ) Load . SW . create () #Apply Self weight Load in Civil NX #Nodal Load Load . Nodal ( 1 , \"Nodal Load\" , \"\" , FX = 10 , FY = 20 , FZ =- 50 , id = 1 ) Load . Nodal ( 3 , \"Nodal Load\" , \"\" , MX = 100 , MY = 20 , MZ =- 5 , id = 2 ) Load . Nodal . create () #Apply Nodal Load in Civil NX #Concentrated Load Load . Beam ( 1 , \"Test Load 1\" , 0 , \"\" , \"GZ\" , 1 ,[ 0.3 , 0.5 , 0.7 ],[ - 20 , - 30 , - 40 ], \"BEAM\" , \"CONLOAD\" ) #UDL Load Load . Beam ( 2 , \"Test Load 2\" , - 50 , \"\" , \"GZ\" ) #Trapezoidal load Load . Beam ( 3 , \"Test Load 3\" , 0 , \"\" , \"GZ\" , \"\" ,[ 0 , 0.3 , 0.7 , 1 ],[ 0 , - 20 , - 50 , 0 ]) #Concentrated Moment/Torsion Load . Beam ( 4 , \"Test Load 4\" , 0 , \"\" , \"GZ\" , \"\" ,[ 0.3 , 0.7 ],[ - 20 , - 50 ], \"BEAM\" , \"CONMOMENT\" ) #Uniform Moment/Torsion Load . Beam ( 5 , \"Test Load 5\" , 0 , \"\" , \"GZ\" , \"\" ,[ 0 , 1 ],[ - 20 , - 20 ], \"BEAM\" , \"UNIMOMENT\" ) #Trapezoidal Moment/Torsion Load . Beam ( 6 , \"Test Load 6\" , 0 , \"\" , \"GZ\" , \"\" ,[ 0.3 , 0.7 ],[ - 30 , - 50 ], \"BEAM\" , \"UNIMOMENT\" ) #Create this Beam load in Civil NX Load . Beam . create ()","title":"Load"},{"location":"Load/#load","text":"The Load class provides a unified interface to create different types of loads and includes nested classes for specific load types.","title":"Load"},{"location":"Load/#methods","text":"","title":"Methods"},{"location":"Load/#create","text":"Creates all defined load cases and loads (Self-Weight, Nodal, and Beam loads) in Civil NX. Load . create ()","title":"create"},{"location":"Load/#complete-example","text":"from midasapi import * MAPI_KEY ( \"eyJ1ciI6IklOMjQwN0ZZVDIiLCJwZyI6ImNpdmlsIiwi\" ) #Paste your Mapi Key for j in range ( 6 ): for i in range ( 2 ): Node ( i * 10 , j * 2 , 0 ) Node . create () j = 0 for k in range ( 6 ): for i in range ( 1 , 2 ): Element . Beam ( i + j , i + 1 + j ) Element . create () j = j + 2 #Load Case Load_Case ( \"D\" , \"SW\" ) Load_Case ( \"L\" , \"Nodal Load\" ) Load_Case ( \"USER\" , \"Test Load 1\" , \"Test Load 2\" , \"Test Load 3\" , \"Test Load 4\" , \"Test Load 5\" , \"Test Load 6\" ) Load_Case . create () #Create Load Case in Civil NX #Self Weight Load Load . SW ( \"SW\" , \"Z\" , - 1 ) Load . SW . create () #Apply Self weight Load in Civil NX #Nodal Load Load . Nodal ( 1 , \"Nodal Load\" , \"\" , FX = 10 , FY = 20 , FZ =- 50 , id = 1 ) Load . Nodal ( 3 , \"Nodal Load\" , \"\" , MX = 100 , MY = 20 , MZ =- 5 , id = 2 ) Load . Nodal . create () #Apply Nodal Load in Civil NX #Concentrated Load Load . Beam ( 1 , \"Test Load 1\" , 0 , \"\" , \"GZ\" , 1 ,[ 0.3 , 0.5 , 0.7 ],[ - 20 , - 30 , - 40 ], \"BEAM\" , \"CONLOAD\" ) #UDL Load Load . Beam ( 2 , \"Test Load 2\" , - 50 , \"\" , \"GZ\" ) #Trapezoidal load Load . Beam ( 3 , \"Test Load 3\" , 0 , \"\" , \"GZ\" , \"\" ,[ 0 , 0.3 , 0.7 , 1 ],[ 0 , - 20 , - 50 , 0 ]) #Concentrated Moment/Torsion Load . Beam ( 4 , \"Test Load 4\" , 0 , \"\" , \"GZ\" , \"\" ,[ 0.3 , 0.7 ],[ - 20 , - 50 ], \"BEAM\" , \"CONMOMENT\" ) #Uniform Moment/Torsion Load . Beam ( 5 , \"Test Load 5\" , 0 , \"\" , \"GZ\" , \"\" ,[ 0 , 1 ],[ - 20 , - 20 ], \"BEAM\" , \"UNIMOMENT\" ) #Trapezoidal Moment/Torsion Load . Beam ( 6 , \"Test Load 6\" , 0 , \"\" , \"GZ\" , \"\" ,[ 0.3 , 0.7 ],[ - 30 , - 50 ], \"BEAM\" , \"UNIMOMENT\" ) #Create this Beam load in Civil NX Load . Beam . create ()","title":"Complete Example"},{"location":"Load/000sw/","text":"SELF-WEIGHT LOAD A nested class within Load used to create self-weight loads. Constructor Load.SW(load_case, dir = \"Z\", value = -1, load_group = \"\") Creates a self-weight load for the specified load case. Parameters load_case : Name of the load case dir (default=\"Z\") : Direction of self-weight (\"X\", \"Y\", or \"Z\") value (default=-1) : Magnitude of self-weight (can be int or list [FX, FY, FZ]) load_group (default=\"\") : Load group name Methods json Returns JSON representation of all self-weight loads. sw1 = Load . SW ( \"Dead Load\" , \"Z\" , - 1 ) print ( Load . SW . json ()) create Sends self-weight loads to Civil NX. Load . SW . create () get Fetches self-weight loads from Civil NX. print ( Load . SW . get ()) sync Synchronizes self-weight loads from Civil NX. Load . SW . sync () Examples # Simple self-weight in Z direction for i in range ( 2 ): Node ( i * 10 , 0 , 0 ) Node . create () Element . Beam ( 1 , 2 ) Element . create () #Load Case Load_Case ( \"D\" , \"SW Load\" ) Load_Case . create () Load . SW ( \"SW Load\" , \"Z\" , - 1 ) Load . SW . create ()","title":"\u200e \u200e \u200e Self Weight"},{"location":"Load/000sw/#self-weight-load","text":"A nested class within Load used to create self-weight loads.","title":"SELF-WEIGHT LOAD"},{"location":"Load/000sw/#constructor","text":"Load.SW(load_case, dir = \"Z\", value = -1, load_group = \"\") Creates a self-weight load for the specified load case.","title":"Constructor"},{"location":"Load/000sw/#parameters","text":"load_case : Name of the load case dir (default=\"Z\") : Direction of self-weight (\"X\", \"Y\", or \"Z\") value (default=-1) : Magnitude of self-weight (can be int or list [FX, FY, FZ]) load_group (default=\"\") : Load group name","title":"Parameters"},{"location":"Load/000sw/#methods","text":"","title":"Methods"},{"location":"Load/000sw/#json","text":"Returns JSON representation of all self-weight loads. sw1 = Load . SW ( \"Dead Load\" , \"Z\" , - 1 ) print ( Load . SW . json ())","title":"json"},{"location":"Load/000sw/#create","text":"Sends self-weight loads to Civil NX. Load . SW . create ()","title":"create"},{"location":"Load/000sw/#get","text":"Fetches self-weight loads from Civil NX. print ( Load . SW . get ())","title":"get"},{"location":"Load/000sw/#sync","text":"Synchronizes self-weight loads from Civil NX. Load . SW . sync ()","title":"sync"},{"location":"Load/000sw/#examples","text":"# Simple self-weight in Z direction for i in range ( 2 ): Node ( i * 10 , 0 , 0 ) Node . create () Element . Beam ( 1 , 2 ) Element . create () #Load Case Load_Case ( \"D\" , \"SW Load\" ) Load_Case . create () Load . SW ( \"SW Load\" , \"Z\" , - 1 ) Load . SW . create ()","title":"Examples"},{"location":"Load/001nodal/","text":"NODAL LOADS A nested class within Load used to create nodal loads. Constructor Load.Nodal(node, load_case, load_group = \"\", FX = 0, FY = 0, FZ = 0, MX = 0, MY = 0, MZ = 0, id = \"\") Creates nodal loads (forces and moments) at specified nodes. Parameters node : Node ID where load is applied load_case : Name of the load case load_group (default=\"\") : Load group name FX, FY, FZ (default=0) : Force components in X, Y, Z directions MX, MY, MZ (default=0) : Moment components about X, Y, Z axes id (default=\"\") : Manual ID assignment (auto-assigned if empty) Methods json Returns JSON representation of all nodal loads. nl1 = Load . Nodal ( 101 , \"Live Load\" , FZ =- 50 ) print ( Load . Nodal . json ()) create Sends nodal loads to Civil NX. Load . Nodal . create () get Fetches nodal loads from Civil NX. print ( Load . Nodal . get ()) sync Synchronizes nodal loads from Civil NX. Load . Nodal . sync () delete Deletes all nodal loads from both Python and Civil NX. Load . Nodal . delete () Examples #Nodal Load Example for i in range ( 2 ): Node ( i * 10 , 0 , 0 ) Node . create () Element . Beam ( 1 , 2 ) Element . create () #Load Case Load_Case ( \"L\" , \"Nodal Load\" ) Load_Case . create () #Define Nodal Load Load . Nodal ( 1 , \"Nodal Load\" , \"\" , FX = 100 , FY = 200 , FZ =- 50 , id = 1 ) Load . Nodal ( 2 , \"Nodal Load\" , \"\" , MX = 10 , MY = 20 , MZ =- 5 , id = 2 ) Load . Nodal . create ()","title":"\u200e \u200e \u200e Nodal Load"},{"location":"Load/001nodal/#nodal-loads","text":"A nested class within Load used to create nodal loads.","title":"NODAL LOADS"},{"location":"Load/001nodal/#constructor","text":"Load.Nodal(node, load_case, load_group = \"\", FX = 0, FY = 0, FZ = 0, MX = 0, MY = 0, MZ = 0, id = \"\") Creates nodal loads (forces and moments) at specified nodes.","title":"Constructor"},{"location":"Load/001nodal/#parameters","text":"node : Node ID where load is applied load_case : Name of the load case load_group (default=\"\") : Load group name FX, FY, FZ (default=0) : Force components in X, Y, Z directions MX, MY, MZ (default=0) : Moment components about X, Y, Z axes id (default=\"\") : Manual ID assignment (auto-assigned if empty)","title":"Parameters"},{"location":"Load/001nodal/#methods","text":"","title":"Methods"},{"location":"Load/001nodal/#json","text":"Returns JSON representation of all nodal loads. nl1 = Load . Nodal ( 101 , \"Live Load\" , FZ =- 50 ) print ( Load . Nodal . json ())","title":"json"},{"location":"Load/001nodal/#create","text":"Sends nodal loads to Civil NX. Load . Nodal . create ()","title":"create"},{"location":"Load/001nodal/#get","text":"Fetches nodal loads from Civil NX. print ( Load . Nodal . get ())","title":"get"},{"location":"Load/001nodal/#sync","text":"Synchronizes nodal loads from Civil NX. Load . Nodal . sync ()","title":"sync"},{"location":"Load/001nodal/#delete","text":"Deletes all nodal loads from both Python and Civil NX. Load . Nodal . delete ()","title":"delete"},{"location":"Load/001nodal/#examples","text":"#Nodal Load Example for i in range ( 2 ): Node ( i * 10 , 0 , 0 ) Node . create () Element . Beam ( 1 , 2 ) Element . create () #Load Case Load_Case ( \"L\" , \"Nodal Load\" ) Load_Case . create () #Define Nodal Load Load . Nodal ( 1 , \"Nodal Load\" , \"\" , FX = 100 , FY = 200 , FZ =- 50 , id = 1 ) Load . Nodal ( 2 , \"Nodal Load\" , \"\" , MX = 10 , MY = 20 , MZ =- 5 , id = 2 ) Load . Nodal . create ()","title":"Examples"},{"location":"Load/002beam/","text":"BEAM LOADS A nested class within Load used to create beam loads with comprehensive options for distributed loads, concentrated loads, and eccentricity. Constructor Load.Beam(element, load_case, value, load_group = \"\", direction = \"GZ\", id = \"\", D = [0, 1, 0, 0], P = [0, 0, 0, 0], cmd = \"BEAM\", typ = \"UNILOAD\", use_ecc = False, use_proj = False, eccn_dir = \"LZ\", eccn_type = 1, ieccn = 0, jeccn = 0.0000195, adnl_h = False, adnl_h_i = 0, adnl_h_j = 0.0000195) Creates beam loads with various distribution patterns and advanced options. Parameters element : Element number where load is applied load_case : Load case name value : Load magnitude load_group (default=\"\") : Load group name direction (default=\"GZ\") : Load direction (\"GX\", \"GY\", \"GZ\", \"LX\", \"LY\", \"LZ\") id (default=\"\") : Manual ID assignment (auto-assigned if empty) D (default=[0, 1, 0, 0]) : Relative distance array (4 values based on element length) P (default=[0, 0, 0, 0]) : Load magnitude at corresponding D positions cmd (default=\"BEAM\") : Load command (\"BEAM\", \"LINE\", \"TYPICAL\") typ (default=\"UNILOAD\") : Load type (\"CONLOAD\", \"CONMOMENT\", \"UNILOAD\", \"UNIMOMENT\", \"PRESSURE\") use_ecc (default=False) : Enable eccentricity use_proj (default=False) : Enable projection eccn_dir (default=\"LZ\") : Eccentricity direction eccn_type (default=1) : Eccentricity from offset (1) or centroid (0) ieccn, jeccn (default=0, 0.0000195) : Eccentricity values at i-end and j-end adnl_h (default=False) : Consider additional height for pressure loads adnl_h_i, adnl_h_j (default=0, 0.0000195) : Additional height values at ends Methods json Returns JSON representation of all beam loads. bl1 = Load . Beam ( 115 , \"Live Load\" , - 50.0 ) print ( Load . Beam . json ()) create Sends beam loads to Civil NX. Load . Beam . create () get Fetches beam loads from Civil NX. print ( Load . Beam . get ()) sync Synchronizes beam loads from Civil NX. Load . Beam . sync () delete Deletes all beam loads from both Python and Civil NX. Load . Beam . delete () Examples Uniform Distributed Load #UDL Load Example for i in range ( 2 ): Node ( i * 10 , 0 , 0 ) Node . create () Element . Beam ( 1 , 2 ) Element . create () #Define Load Case Load_Case ( \"L\" , \"UDL Load\" ) Load_Case . create () #Apply UDL Load Load . Beam ( 1 , \"UDL Load\" , - 50 , \"\" , \"GZ\" ) Load . Beam . create () Trapezoidal Load #Trapezoidal Load Example for i in range ( 2 ): Node ( i * 10 , 0 , 0 ) Node . create () Element . Beam ( 1 , 2 ) Element . create () #Define Load Case Load_Case ( \"L\" , \"Trapezoidal Load\" ) Load_Case . create () #Apply Trapezoidal Load Load . Beam ( 1 , \"Trapezoidal Load\" , 0 , \"\" , \"GZ\" , \"\" ,[ 0 , 0.3 , 0.7 , 1 ],[ 0 , - 20 , - 50 , 0 ]) Load . Beam . create () Concentrated Load #Concentrated Load Example for i in range ( 2 ): Node ( i * 10 , 0 , 0 ) Node . create () Element . Beam ( 1 , 2 ) Element . create () #Load Case Load_Case ( \"L\" , \"Test Load\" ) Load_Case . create () #Apply Concentrated Load Load . Beam ( 1 , \"Test Load\" , 0 , \"\" , \"GZ\" , 1 ,[ 0.3 , 0.5 , 0.7 ],[ - 20 , - 30 , - 40 ], \"BEAM\" , \"CONLOAD\" ) Load . Beam . create () Load with Eccentricity #Eccentric Load Example for i in range ( 2 ): Node ( i * 10 , 0 , 0 ) Node . create () Element . Beam ( 1 , 2 ) Element . create () #Define Load Case Load_Case ( \"L\" , \"Test Load\" ) Load_Case . create () # Apply Load with 2.5 m eccentricity at i-end Load . Beam ( 1 , \"Test Load\" , - 100 , use_ecc = True , ieccn = 2.5 ) Load . Beam . create () Concentrated Moment/Torsion #Concentrated Moment/Torsion Example for i in range ( 2 ): Node ( i * 10 , 0 , 0 ) Node . create () Element . Beam ( 1 , 2 ) Element . create () #Define Load Case Load_Case ( \"L\" , \"Test Load\" ) Load_Case . create () # Apply Concentrated Moment/Torsion Load . Beam ( 1 , \"Test Load\" , 0 , \"\" , \"GZ\" , \"\" ,[ 0.3 , 0.7 ],[ - 20 , - 50 ], \"BEAM\" , \"CONMOMENT\" ) Load . Beam . create () Uniform & Trapezoidal Moment/Torsion #Uniform & Trapezoidal Moment/Torsion Example for i in range ( 3 ): Node ( i * 10 , 0 , 0 ) Node . create () Element . Beam ( 1 , 2 ) Element . Beam ( 2 , 3 ) Element . create () #Define Load Case Load_Case ( \"L\" , \"Test Load 1\" , \"Test Load 2\" ) Load_Case . create () #Uniform Moment/Torsion Load . Beam ( 1 , \"Test Load 1\" , 0 , \"\" , \"GZ\" , \"\" ,[ 0 , 1 ],[ - 20 , - 20 ], \"BEAM\" , \"UNIMOMENT\" ) #Trapezoidal Moment/Torsion Load . Beam ( 2 , \"Test Load 2\" , 0 , \"\" , \"GZ\" , \"\" ,[ 0.3 , 0.7 ],[ - 30 , - 50 ], \"BEAM\" , \"UNIMOMENT\" ) Load . Beam . create ()","title":"\u200e \u200e \u200e Beam Load"},{"location":"Load/002beam/#beam-loads","text":"A nested class within Load used to create beam loads with comprehensive options for distributed loads, concentrated loads, and eccentricity.","title":"BEAM LOADS"},{"location":"Load/002beam/#constructor","text":"Load.Beam(element, load_case, value, load_group = \"\", direction = \"GZ\", id = \"\", D = [0, 1, 0, 0], P = [0, 0, 0, 0], cmd = \"BEAM\", typ = \"UNILOAD\", use_ecc = False, use_proj = False, eccn_dir = \"LZ\", eccn_type = 1, ieccn = 0, jeccn = 0.0000195, adnl_h = False, adnl_h_i = 0, adnl_h_j = 0.0000195) Creates beam loads with various distribution patterns and advanced options.","title":"Constructor"},{"location":"Load/002beam/#parameters","text":"element : Element number where load is applied load_case : Load case name value : Load magnitude load_group (default=\"\") : Load group name direction (default=\"GZ\") : Load direction (\"GX\", \"GY\", \"GZ\", \"LX\", \"LY\", \"LZ\") id (default=\"\") : Manual ID assignment (auto-assigned if empty) D (default=[0, 1, 0, 0]) : Relative distance array (4 values based on element length) P (default=[0, 0, 0, 0]) : Load magnitude at corresponding D positions cmd (default=\"BEAM\") : Load command (\"BEAM\", \"LINE\", \"TYPICAL\") typ (default=\"UNILOAD\") : Load type (\"CONLOAD\", \"CONMOMENT\", \"UNILOAD\", \"UNIMOMENT\", \"PRESSURE\") use_ecc (default=False) : Enable eccentricity use_proj (default=False) : Enable projection eccn_dir (default=\"LZ\") : Eccentricity direction eccn_type (default=1) : Eccentricity from offset (1) or centroid (0) ieccn, jeccn (default=0, 0.0000195) : Eccentricity values at i-end and j-end adnl_h (default=False) : Consider additional height for pressure loads adnl_h_i, adnl_h_j (default=0, 0.0000195) : Additional height values at ends","title":"Parameters"},{"location":"Load/002beam/#methods","text":"","title":"Methods"},{"location":"Load/002beam/#json","text":"Returns JSON representation of all beam loads. bl1 = Load . Beam ( 115 , \"Live Load\" , - 50.0 ) print ( Load . Beam . json ())","title":"json"},{"location":"Load/002beam/#create","text":"Sends beam loads to Civil NX. Load . Beam . create ()","title":"create"},{"location":"Load/002beam/#get","text":"Fetches beam loads from Civil NX. print ( Load . Beam . get ())","title":"get"},{"location":"Load/002beam/#sync","text":"Synchronizes beam loads from Civil NX. Load . Beam . sync ()","title":"sync"},{"location":"Load/002beam/#delete","text":"Deletes all beam loads from both Python and Civil NX. Load . Beam . delete ()","title":"delete"},{"location":"Load/002beam/#examples","text":"","title":"Examples"},{"location":"Load/002beam/#uniform-distributed-load","text":"#UDL Load Example for i in range ( 2 ): Node ( i * 10 , 0 , 0 ) Node . create () Element . Beam ( 1 , 2 ) Element . create () #Define Load Case Load_Case ( \"L\" , \"UDL Load\" ) Load_Case . create () #Apply UDL Load Load . Beam ( 1 , \"UDL Load\" , - 50 , \"\" , \"GZ\" ) Load . Beam . create ()","title":"Uniform Distributed Load"},{"location":"Load/002beam/#trapezoidal-load","text":"#Trapezoidal Load Example for i in range ( 2 ): Node ( i * 10 , 0 , 0 ) Node . create () Element . Beam ( 1 , 2 ) Element . create () #Define Load Case Load_Case ( \"L\" , \"Trapezoidal Load\" ) Load_Case . create () #Apply Trapezoidal Load Load . Beam ( 1 , \"Trapezoidal Load\" , 0 , \"\" , \"GZ\" , \"\" ,[ 0 , 0.3 , 0.7 , 1 ],[ 0 , - 20 , - 50 , 0 ]) Load . Beam . create ()","title":"Trapezoidal Load"},{"location":"Load/002beam/#concentrated-load","text":"#Concentrated Load Example for i in range ( 2 ): Node ( i * 10 , 0 , 0 ) Node . create () Element . Beam ( 1 , 2 ) Element . create () #Load Case Load_Case ( \"L\" , \"Test Load\" ) Load_Case . create () #Apply Concentrated Load Load . Beam ( 1 , \"Test Load\" , 0 , \"\" , \"GZ\" , 1 ,[ 0.3 , 0.5 , 0.7 ],[ - 20 , - 30 , - 40 ], \"BEAM\" , \"CONLOAD\" ) Load . Beam . create ()","title":"Concentrated Load"},{"location":"Load/002beam/#load-with-eccentricity","text":"#Eccentric Load Example for i in range ( 2 ): Node ( i * 10 , 0 , 0 ) Node . create () Element . Beam ( 1 , 2 ) Element . create () #Define Load Case Load_Case ( \"L\" , \"Test Load\" ) Load_Case . create () # Apply Load with 2.5 m eccentricity at i-end Load . Beam ( 1 , \"Test Load\" , - 100 , use_ecc = True , ieccn = 2.5 ) Load . Beam . create ()","title":"Load with Eccentricity"},{"location":"Load/002beam/#concentrated-momenttorsion","text":"#Concentrated Moment/Torsion Example for i in range ( 2 ): Node ( i * 10 , 0 , 0 ) Node . create () Element . Beam ( 1 , 2 ) Element . create () #Define Load Case Load_Case ( \"L\" , \"Test Load\" ) Load_Case . create () # Apply Concentrated Moment/Torsion Load . Beam ( 1 , \"Test Load\" , 0 , \"\" , \"GZ\" , \"\" ,[ 0.3 , 0.7 ],[ - 20 , - 50 ], \"BEAM\" , \"CONMOMENT\" ) Load . Beam . create ()","title":"Concentrated Moment/Torsion"},{"location":"Load/002beam/#uniform-trapezoidal-momenttorsion","text":"#Uniform & Trapezoidal Moment/Torsion Example for i in range ( 3 ): Node ( i * 10 , 0 , 0 ) Node . create () Element . Beam ( 1 , 2 ) Element . Beam ( 2 , 3 ) Element . create () #Define Load Case Load_Case ( \"L\" , \"Test Load 1\" , \"Test Load 2\" ) Load_Case . create () #Uniform Moment/Torsion Load . Beam ( 1 , \"Test Load 1\" , 0 , \"\" , \"GZ\" , \"\" ,[ 0 , 1 ],[ - 20 , - 20 ], \"BEAM\" , \"UNIMOMENT\" ) #Trapezoidal Moment/Torsion Load . Beam ( 2 , \"Test Load 2\" , 0 , \"\" , \"GZ\" , \"\" ,[ 0.3 , 0.7 ],[ - 30 , - 50 ], \"BEAM\" , \"UNIMOMENT\" ) Load . Beam . create ()","title":"Uniform &amp; Trapezoidal Moment/Torsion"},{"location":"Load/case/","text":"Load Case The module provides functionality to create, manage, and synchronize load cases in the model. Note. All the codes below assumes the initial import and MAPI Key definition. from midasapi import * MAPI_KEY ( 'eyJ1ciI6InN1bWl0QG1pZGFzaXQuY29tIiwicGciO252a81571d' ) Constructor To create load cases, use the Load_Case constructor. Load_Case(type, *name) Creates load cases with specified type and names. Parameters type : Load case type *name : Variable number of load case names Class Attributes Load_Case.cases -> List of all load cases. # Create load cases lc1 = Load_Case ( \"D\" , \"Dead Load\" , \"Additional Dead\" ) lc2 = Load_Case ( \"L\" , \"Live Load\" ) for lc in Load_Case . cases : print ( f 'Load Case IDs: { lc . ID } | Names: { lc . NAME } | Type: { lc . TYPE } ' ) # Output: # Load Case IDs: [1, 2] | Names: ('Dead Load', 'Additional Dead') | Type: D # Load Case IDs: [3] | Names: ('Live Load',) | Type: L Methods json Returns a JSON representation of all Load Cases defined in python. lc1 = Load_Case ( \"D\" , \"Dead Load\" , \"Additional Dead\" ) lc2 = Load_Case ( \"L\" , \"Live Load\" ) print ( Load_Case . json ()) # Output: # {'Assign': {1: {'NAME': 'Dead Load', 'TYPE': 'D'}, 2: {'NAME': 'Additional Dead', 'TYPE': 'D'}, 3: {'NAME': 'Live Load', 'TYPE': 'L'}}} create Sends the current load case list to Civil NX using a PUT request. lc1 = Load_Case ( \"D\" , \"Dead Load\" ) lc2 = Load_Case ( \"L\" , \"Live Load\" ) Load_Case . create () get Fetches load cases from Civil NX and returns the JSON representation. print ( Load_Case . get ()) # Output # {'STLD': {'1': {'NAME': 'Dead Load', 'TYPE': 'D'}, '2': {'NAME': 'Live Load', 'TYPE': 'L'}}} sync Retrieves Load Case data from Civil NX and rebuilds the internal load case list. Load_Case . sync () for lc in Load_Case . cases : print ( f 'Load Case: { lc . NAME } | Type: { lc . TYPE } ' ) delete Deletes all load case data from both Python and Civil NX. Load_Case . delete ()","title":"Load Case"},{"location":"Load/case/#load-case","text":"The module provides functionality to create, manage, and synchronize load cases in the model. Note. All the codes below assumes the initial import and MAPI Key definition. from midasapi import * MAPI_KEY ( 'eyJ1ciI6InN1bWl0QG1pZGFzaXQuY29tIiwicGciO252a81571d' )","title":"Load Case"},{"location":"Load/case/#constructor","text":"To create load cases, use the Load_Case constructor. Load_Case(type, *name) Creates load cases with specified type and names.","title":"Constructor"},{"location":"Load/case/#parameters","text":"type : Load case type *name : Variable number of load case names","title":"Parameters"},{"location":"Load/case/#class-attributes","text":"Load_Case.cases -> List of all load cases. # Create load cases lc1 = Load_Case ( \"D\" , \"Dead Load\" , \"Additional Dead\" ) lc2 = Load_Case ( \"L\" , \"Live Load\" ) for lc in Load_Case . cases : print ( f 'Load Case IDs: { lc . ID } | Names: { lc . NAME } | Type: { lc . TYPE } ' ) # Output: # Load Case IDs: [1, 2] | Names: ('Dead Load', 'Additional Dead') | Type: D # Load Case IDs: [3] | Names: ('Live Load',) | Type: L","title":"Class Attributes"},{"location":"Load/case/#methods","text":"","title":"Methods"},{"location":"Load/case/#json","text":"Returns a JSON representation of all Load Cases defined in python. lc1 = Load_Case ( \"D\" , \"Dead Load\" , \"Additional Dead\" ) lc2 = Load_Case ( \"L\" , \"Live Load\" ) print ( Load_Case . json ()) # Output: # {'Assign': {1: {'NAME': 'Dead Load', 'TYPE': 'D'}, 2: {'NAME': 'Additional Dead', 'TYPE': 'D'}, 3: {'NAME': 'Live Load', 'TYPE': 'L'}}}","title":"json"},{"location":"Load/case/#create","text":"Sends the current load case list to Civil NX using a PUT request. lc1 = Load_Case ( \"D\" , \"Dead Load\" ) lc2 = Load_Case ( \"L\" , \"Live Load\" ) Load_Case . create ()","title":"create"},{"location":"Load/case/#get","text":"Fetches load cases from Civil NX and returns the JSON representation. print ( Load_Case . get ()) # Output # {'STLD': {'1': {'NAME': 'Dead Load', 'TYPE': 'D'}, '2': {'NAME': 'Live Load', 'TYPE': 'L'}}}","title":"get"},{"location":"Load/case/#sync","text":"Retrieves Load Case data from Civil NX and rebuilds the internal load case list. Load_Case . sync () for lc in Load_Case . cases : print ( f 'Load Case: { lc . NAME } | Type: { lc . TYPE } ' )","title":"sync"},{"location":"Load/case/#delete","text":"Deletes all load case data from both Python and Civil NX. Load_Case . delete ()","title":"delete"},{"location":"Material/","text":"Material The module provides functionality to create, manage, and synchronize materials in the model. Note. All the codes below assumes the initial import and MAPI Key definition. from midasapi import * MAPI_KEY ( 'eyJ1ciI6InN1bWl0QG1pZGFzaXQuY29tIiwicGciO252k81571d' ) Material Constructor Material(data, id=0) Creates a material with specified data and optional ID. Parameters data : Material data dictionary containing material properties id (default=0) : Manual ID assignment (auto-assigned if 0 or ID already exists) Class Attributes Material.mats -> List of all material instances. Material.ids -> List of all material IDs. # Example material data mat1 = Material . CONC ( \"M30 Grade\" , \"IS(RC)\" , \"M30\" , 1 ) mat2 = Material . STEEL ( \"S450 Steel\" , \"EN05(S)\" , \"S450\" , 2 ) mat3 = Material . USER ( \"Timber\" , E = 12000 , pois = 0.4 , den = 6 , mass = 6 , therm = 5e-6 , id = 3 ) Material . create () Methods json Returns a JSON representation of all Materials defined in python. print ( Material . json ()) # Output: # {'Assign': {1: {'TYPE': 'CONC', 'NAME': 'C30', 'DAMP_RAT': 0.05, ...}}} create Sends the current material list to Civil NX using a PUT request. Material . create () get Fetches materials from Civil NX and returns the JSON representation. print ( Material . get ()) sync Retrieves Material data from Civil NX and rebuilds the internal material list. Material . sync () delete Deletes all material data from both Python and Civil NX. Material . delete () Complete Example from midasapi import * MAPI_KEY ( \"eyJ1ciI6IklOMjQwN0ZZVDIiLCJwZyI6ImNpdmlsIiwi\" ) #Paste your MAPI Key # Create concrete materials from database conc1 = Material . CONC ( \"M30 Grade\" , \"IS(RC)\" , \"M30\" , 1 ) conc2 = Material . CONC ( \"Concrete \" , \"EN04(RC)\" , \"C30/37\" , 2 ) # Create user-defined concrete material conc_user = Material . CONC . User ( \"Custom Concrete\" , E = 300000 , pois = 0.2 , den = 25 , mass = 2.5 , therm = 1e-5 , id = 3 ) # Create steel materials from database steel1 = Material . STEEL ( \"S450 Steel\" , \"EN05(S)\" , \"S450\" , 4 ) steel2 = Material . STEEL ( \"Fe540 Steel\" , \"IS(S)\" , \"Fe540\" , 5 ) # Create user-defined steel material steel_user = Material . STEEL . User ( \"Custom Steel\" , E = 200000 , pois = 0.3 , den = 78.5 , mass = 7.85 , therm = 1.2e-5 , id = 6 ) # Create generic user material user_mat = Material . USER ( \"Timber\" , E = 12000 , pois = 0.4 , den = 6 , mass = 6 , therm = 5e-6 , id = 7 ) # Create all materials in Civil NX Material . create () print ( \"All materials created successfully!\" )","title":"Material"},{"location":"Material/#material","text":"The module provides functionality to create, manage, and synchronize materials in the model. Note. All the codes below assumes the initial import and MAPI Key definition. from midasapi import * MAPI_KEY ( 'eyJ1ciI6InN1bWl0QG1pZGFzaXQuY29tIiwicGciO252k81571d' )","title":"Material"},{"location":"Material/#material_1","text":"","title":"Material"},{"location":"Material/#constructor","text":"Material(data, id=0) Creates a material with specified data and optional ID.","title":"Constructor"},{"location":"Material/#parameters","text":"data : Material data dictionary containing material properties id (default=0) : Manual ID assignment (auto-assigned if 0 or ID already exists)","title":"Parameters"},{"location":"Material/#class-attributes","text":"Material.mats -> List of all material instances. Material.ids -> List of all material IDs. # Example material data mat1 = Material . CONC ( \"M30 Grade\" , \"IS(RC)\" , \"M30\" , 1 ) mat2 = Material . STEEL ( \"S450 Steel\" , \"EN05(S)\" , \"S450\" , 2 ) mat3 = Material . USER ( \"Timber\" , E = 12000 , pois = 0.4 , den = 6 , mass = 6 , therm = 5e-6 , id = 3 ) Material . create ()","title":"Class Attributes"},{"location":"Material/#methods","text":"","title":"Methods"},{"location":"Material/#json","text":"Returns a JSON representation of all Materials defined in python. print ( Material . json ()) # Output: # {'Assign': {1: {'TYPE': 'CONC', 'NAME': 'C30', 'DAMP_RAT': 0.05, ...}}}","title":"json"},{"location":"Material/#create","text":"Sends the current material list to Civil NX using a PUT request. Material . create ()","title":"create"},{"location":"Material/#get","text":"Fetches materials from Civil NX and returns the JSON representation. print ( Material . get ())","title":"get"},{"location":"Material/#sync","text":"Retrieves Material data from Civil NX and rebuilds the internal material list. Material . sync ()","title":"sync"},{"location":"Material/#delete","text":"Deletes all material data from both Python and Civil NX. Material . delete ()","title":"delete"},{"location":"Material/#complete-example","text":"from midasapi import * MAPI_KEY ( \"eyJ1ciI6IklOMjQwN0ZZVDIiLCJwZyI6ImNpdmlsIiwi\" ) #Paste your MAPI Key # Create concrete materials from database conc1 = Material . CONC ( \"M30 Grade\" , \"IS(RC)\" , \"M30\" , 1 ) conc2 = Material . CONC ( \"Concrete \" , \"EN04(RC)\" , \"C30/37\" , 2 ) # Create user-defined concrete material conc_user = Material . CONC . User ( \"Custom Concrete\" , E = 300000 , pois = 0.2 , den = 25 , mass = 2.5 , therm = 1e-5 , id = 3 ) # Create steel materials from database steel1 = Material . STEEL ( \"S450 Steel\" , \"EN05(S)\" , \"S450\" , 4 ) steel2 = Material . STEEL ( \"Fe540 Steel\" , \"IS(S)\" , \"Fe540\" , 5 ) # Create user-defined steel material steel_user = Material . STEEL . User ( \"Custom Steel\" , E = 200000 , pois = 0.3 , den = 78.5 , mass = 7.85 , therm = 1.2e-5 , id = 6 ) # Create generic user material user_mat = Material . USER ( \"Timber\" , E = 12000 , pois = 0.4 , den = 6 , mass = 6 , therm = 5e-6 , id = 7 ) # Create all materials in Civil NX Material . create () print ( \"All materials created successfully!\" )","title":"Complete Example"},{"location":"Material/001concrete/","text":"CONCRETE A nested class within Material used to create concrete materials. Standard Material.CONC(name='', standard='', db='', id=0) Creates a concrete material from database with specified standard and database code. Parameters name (default='') : Material name standard (default='') : Standard code (e.g., \"EN(RC)\", \"ACI(RC)\", \"IS(RC)\") db (default='') : Database material code id (default=0) : Manual ID assignment Examples # Create concrete material from database Material . CONC ( \"M30 Grade\" , \"IS(RC)\" , \"M30\" , 1 ) Material . CONC ( \"Concrete \" , \"EN04(RC)\" , \"C30/37\" , 2 ) Material . create () User-Defined Material.CONC.User(name='', E=0, pois=0, den=0, mass=0, therm=0, id=0) Creates a user-defined concrete material with custom properties. Parameters name (default='') : Material name E (default=0) : Elastic modulus pois (default=0) : Poisson's ratio den (default=0) : Density mass (default=0) : Mass density therm (default=0) : Thermal expansion coefficient id (default=0) : Manual ID assignment Examples # Create user-defined concrete material Material . CONC . User ( \"Custom Concrete\" , E = 300000 , pois = 0.2 , den = 25 , mass = 2.5 , therm = 1e-5 , id = 3 ) Material . create ()","title":"\u200e \u200e \u200e Concrete"},{"location":"Material/001concrete/#concrete","text":"A nested class within Material used to create concrete materials.","title":"CONCRETE"},{"location":"Material/001concrete/#standard","text":"Material.CONC(name='', standard='', db='', id=0) Creates a concrete material from database with specified standard and database code.","title":"Standard"},{"location":"Material/001concrete/#parameters","text":"name (default='') : Material name standard (default='') : Standard code (e.g., \"EN(RC)\", \"ACI(RC)\", \"IS(RC)\") db (default='') : Database material code id (default=0) : Manual ID assignment","title":"Parameters"},{"location":"Material/001concrete/#examples","text":"# Create concrete material from database Material . CONC ( \"M30 Grade\" , \"IS(RC)\" , \"M30\" , 1 ) Material . CONC ( \"Concrete \" , \"EN04(RC)\" , \"C30/37\" , 2 ) Material . create ()","title":"Examples"},{"location":"Material/001concrete/#user-defined","text":"Material.CONC.User(name='', E=0, pois=0, den=0, mass=0, therm=0, id=0) Creates a user-defined concrete material with custom properties.","title":"User-Defined"},{"location":"Material/001concrete/#parameters_1","text":"name (default='') : Material name E (default=0) : Elastic modulus pois (default=0) : Poisson's ratio den (default=0) : Density mass (default=0) : Mass density therm (default=0) : Thermal expansion coefficient id (default=0) : Manual ID assignment","title":"Parameters"},{"location":"Material/001concrete/#examples_1","text":"# Create user-defined concrete material Material . CONC . User ( \"Custom Concrete\" , E = 300000 , pois = 0.2 , den = 25 , mass = 2.5 , therm = 1e-5 , id = 3 ) Material . create ()","title":"Examples"},{"location":"Material/002steel/","text":"STEEL A nested class within Material used to create steel materials. Standard Material.STEEL(name='', standard='', db='', id=0) Creates a steel material from database with specified standard and database code. Parameters name (default='') : Material name standard (default='') : Standard code (e.g., \"EN(S)\", \"AISC(S)\", \"IS(S)\") db (default='') : Database material code id (default=0) : Manual ID assignment Examples # Create steel material from database Material . STEEL ( \"S450 Steel\" , \"EN05(S)\" , \"S450\" , 4 ) Material . STEEL ( \"Fe540 Steel\" , \"IS(S)\" , \"Fe540\" , 5 ) Material . create () User-Defined Material.STEEL.User(name='', E=0, pois=0, den=0, mass=0, therm=0, id=0) Creates a user-defined steel material with custom properties. Parameters name (default='') : Material name E (default=0) : Elastic modulus pois (default=0) : Poisson's ratio den (default=0) : Density mass (default=0) : Mass density therm (default=0) : Thermal expansion coefficient id (default=0) : Manual ID assignment Examples # Create user-defined steel material steel_user = Material . STEEL . User ( \"Custom Steel\" , E = 200000 , pois = 0.3 , den = 78.5 , mass = 7.85 , therm = 1.2e-5 , id = 6 ) Material . create ()","title":"\u200e \u200e \u200e Steel"},{"location":"Material/002steel/#steel","text":"A nested class within Material used to create steel materials.","title":"STEEL"},{"location":"Material/002steel/#standard","text":"Material.STEEL(name='', standard='', db='', id=0) Creates a steel material from database with specified standard and database code.","title":"Standard"},{"location":"Material/002steel/#parameters","text":"name (default='') : Material name standard (default='') : Standard code (e.g., \"EN(S)\", \"AISC(S)\", \"IS(S)\") db (default='') : Database material code id (default=0) : Manual ID assignment","title":"Parameters"},{"location":"Material/002steel/#examples","text":"# Create steel material from database Material . STEEL ( \"S450 Steel\" , \"EN05(S)\" , \"S450\" , 4 ) Material . STEEL ( \"Fe540 Steel\" , \"IS(S)\" , \"Fe540\" , 5 ) Material . create ()","title":"Examples"},{"location":"Material/002steel/#user-defined","text":"Material.STEEL.User(name='', E=0, pois=0, den=0, mass=0, therm=0, id=0) Creates a user-defined steel material with custom properties.","title":"User-Defined"},{"location":"Material/002steel/#parameters_1","text":"name (default='') : Material name E (default=0) : Elastic modulus pois (default=0) : Poisson's ratio den (default=0) : Density mass (default=0) : Mass density therm (default=0) : Thermal expansion coefficient id (default=0) : Manual ID assignment","title":"Parameters"},{"location":"Material/002steel/#examples_1","text":"# Create user-defined steel material steel_user = Material . STEEL . User ( \"Custom Steel\" , E = 200000 , pois = 0.3 , den = 78.5 , mass = 7.85 , therm = 1.2e-5 , id = 6 ) Material . create ()","title":"Examples"},{"location":"Material/003usermat/","text":"USER-DEFINED A nested class within Material used to create generic user-defined materials. Constructor Material.USER(name='', E=0, pois=0, den=0, mass=0, therm=0, id=0) Creates a generic user-defined material with custom properties. Parameters name (default='') : Material name E (default=0) : Elastic modulus pois (default=0) : Poisson's ratio den (default=0) : Density mass (default=0) : Mass density therm (default=0) : Thermal expansion coefficient id (default=0) : Manual ID assignment Examples # Create generic user material user_mat = Material . USER ( \"Timber\" , E = 12000 , pois = 0.4 , den = 6 , mass = 6 , therm = 5e-6 , id = 7 ) Material . create ()","title":"\u200e \u200e \u200e User-defined"},{"location":"Material/003usermat/#user-defined","text":"A nested class within Material used to create generic user-defined materials.","title":"USER-DEFINED"},{"location":"Material/003usermat/#constructor","text":"Material.USER(name='', E=0, pois=0, den=0, mass=0, therm=0, id=0) Creates a generic user-defined material with custom properties.","title":"Constructor"},{"location":"Material/003usermat/#parameters","text":"name (default='') : Material name E (default=0) : Elastic modulus pois (default=0) : Poisson's ratio den (default=0) : Density mass (default=0) : Mass density therm (default=0) : Thermal expansion coefficient id (default=0) : Manual ID assignment","title":"Parameters"},{"location":"Material/003usermat/#examples","text":"# Create generic user material user_mat = Material . USER ( \"Timber\" , E = 12000 , pois = 0.4 , den = 6 , mass = 6 , therm = 5e-6 , id = 7 ) Material . create ()","title":"Examples"},{"location":"Material/010creep/","text":"Creep and Shrinkage The CreepShrinkage class manages time-dependent creep and shrinkage properties for concrete materials. Class Attributes CreepShrinkage.mats -> List of all creep and shrinkage instances. Methods json Returns a JSON representation of all Creep and Shrinkage properties defined in python. print ( CreepShrinkage . json ()) # Output: # {'Assign': {1: {'NAME': 'CS_M25', 'CODE': 'INDIA_IRC_112_2011', ...}}} create Sends creep and shrinkage data to Civil NX using a PUT request. CreepShrinkage . create () get Fetches creep and shrinkage data from Civil NX and returns the JSON representation. print ( CreepShrinkage . get ()) sync Retrieves Creep and Shrinkage data from Civil NX and rebuilds the internal list. CreepShrinkage . sync () delete Deletes all creep and shrinkage data from both Python and Civil NX. CreepShrinkage . delete () CODAL PROVISIONS IRC Code (18,112) IRC CreepShrinkage.IRC(name='', code=\"INDIA_IRC_112_2011\", fck=0, notionalSize=1, relHumidity=70, ageShrinkage=3, typeCement='NR', id=0) Creates IRC standard creep and shrinkage properties. Parameters name (default='') : Property name code : Indian Code available : | \"INDIA_IRC_18_2000\" | \"INDIA_IRC_112_2011\" | fck (default=0) : Characteristic compressive strength notionalSize (default=1) : Notional size relHumidity (default=70) : Relative humidity (%) ageShrinkage (default=3) : Age at start of shrinkage (days) typeCement (default='NR') : Type of cement ('R' for Rapid, 'NR' for Normal) id (default=0) : Manual ID assignment Examples # Create IRC creep and shrinkage properties cs1 = CreepShrinkage . IRC ( \"CS_M25\" , \"INDIA_IRC_112_2011\" , fck = 25 , notionalSize = 150 , relHumidity = 75 , ageShrinkage = 7 , typeCement = 'R' , id = 1 ) cs2 = CreepShrinkage . IRC ( \"CS_C30\" , \"INDIA_IRC_112_2011\" , fck = 30 , notionalSize = 200 , relHumidity = 70 , ageShrinkage = 3 , typeCement = 'NR' , id = 2 ) CreepShrinkage . create ()","title":"Creep Shrinkage"},{"location":"Material/010creep/#creep-and-shrinkage","text":"The CreepShrinkage class manages time-dependent creep and shrinkage properties for concrete materials.","title":"Creep and Shrinkage"},{"location":"Material/010creep/#class-attributes","text":"CreepShrinkage.mats -> List of all creep and shrinkage instances.","title":"Class Attributes"},{"location":"Material/010creep/#methods","text":"","title":"Methods"},{"location":"Material/010creep/#json","text":"Returns a JSON representation of all Creep and Shrinkage properties defined in python. print ( CreepShrinkage . json ()) # Output: # {'Assign': {1: {'NAME': 'CS_M25', 'CODE': 'INDIA_IRC_112_2011', ...}}}","title":"json"},{"location":"Material/010creep/#create","text":"Sends creep and shrinkage data to Civil NX using a PUT request. CreepShrinkage . create ()","title":"create"},{"location":"Material/010creep/#get","text":"Fetches creep and shrinkage data from Civil NX and returns the JSON representation. print ( CreepShrinkage . get ())","title":"get"},{"location":"Material/010creep/#sync","text":"Retrieves Creep and Shrinkage data from Civil NX and rebuilds the internal list. CreepShrinkage . sync ()","title":"sync"},{"location":"Material/010creep/#delete","text":"Deletes all creep and shrinkage data from both Python and Civil NX. CreepShrinkage . delete ()","title":"delete"},{"location":"Material/010creep/#codal-provisions","text":"IRC Code (18,112)","title":"CODAL PROVISIONS"},{"location":"Material/010creep/#irc","text":"CreepShrinkage.IRC(name='', code=\"INDIA_IRC_112_2011\", fck=0, notionalSize=1, relHumidity=70, ageShrinkage=3, typeCement='NR', id=0) Creates IRC standard creep and shrinkage properties.","title":"IRC"},{"location":"Material/010creep/#parameters","text":"name (default='') : Property name code : Indian Code available : | \"INDIA_IRC_18_2000\" | \"INDIA_IRC_112_2011\" | fck (default=0) : Characteristic compressive strength notionalSize (default=1) : Notional size relHumidity (default=70) : Relative humidity (%) ageShrinkage (default=3) : Age at start of shrinkage (days) typeCement (default='NR') : Type of cement ('R' for Rapid, 'NR' for Normal) id (default=0) : Manual ID assignment","title":"Parameters"},{"location":"Material/010creep/#examples","text":"# Create IRC creep and shrinkage properties cs1 = CreepShrinkage . IRC ( \"CS_M25\" , \"INDIA_IRC_112_2011\" , fck = 25 , notionalSize = 150 , relHumidity = 75 , ageShrinkage = 7 , typeCement = 'R' , id = 1 ) cs2 = CreepShrinkage . IRC ( \"CS_C30\" , \"INDIA_IRC_112_2011\" , fck = 30 , notionalSize = 200 , relHumidity = 70 , ageShrinkage = 3 , typeCement = 'NR' , id = 2 ) CreepShrinkage . create ()","title":"Examples"},{"location":"Material/011comp/","text":"Compressive Strength The CompStrength class manages time-dependent compressive strength properties for concrete materials. Class Attributes CompStrength.mats -> List of all compressive strength instances. Methods json Returns a JSON representation of all Compressive Strength properties defined in python. print ( CompStrength . json ()) # Output: # {'Assign': {1: {'NAME': 'Comp_M25', 'TYPE': 'CODE', ...}}} create Sends compressive strength data to Civil NX using a PUT request. CompStrength . create () get Fetches compressive strength data from Civil NX and returns the JSON representation. print ( CompStrength . get ()) sync Retrieves Compressive Strength data from Civil NX and rebuilds the internal list. CompStrength . sync () delete Deletes all compressive strength data from both Python and Civil NX. CompStrength . delete () CODAL PROVISIONS IRC Code (112) IRC CompStrength.IRC(name, code=\"INDIA(IRC:112-2020)\", fckDelta=0, typeCement=1, typeAggregate=0, id=0) Creates IRC standard compressive strength properties. Parameters name : Property name (required) code (default=\"INDIA(IRC:112-2020)\") : IRC code standard fckDelta (default=0) : Compressive strength difference (MPa) typeCement (default=1) : Type of cement (1=Normal, 2=Rapid) typeAggregate (default=0) : Type of aggregate (0=Normal, 1=Lightweight) id (default=0) : Manual ID assignment Examples # Create IRC compressive strength properties comp1 = CompStrength . IRC ( \"Comp_M25\" , \"INDIA(IRC:112-2020)\" , fckDelta = 5 , typeCement = 1 , typeAggregate = 0 , id = 1 ) comp2 = CompStrength . IRC ( \"Comp_C30\" , \"INDIA(IRC:112-2020)\" , fckDelta = 5 , typeCement = 2 , typeAggregate = 1 , id = 2 ) CompStrength . create ()","title":"Compressive Strength"},{"location":"Material/011comp/#compressive-strength","text":"The CompStrength class manages time-dependent compressive strength properties for concrete materials.","title":"Compressive Strength"},{"location":"Material/011comp/#class-attributes","text":"CompStrength.mats -> List of all compressive strength instances.","title":"Class Attributes"},{"location":"Material/011comp/#methods","text":"","title":"Methods"},{"location":"Material/011comp/#json","text":"Returns a JSON representation of all Compressive Strength properties defined in python. print ( CompStrength . json ()) # Output: # {'Assign': {1: {'NAME': 'Comp_M25', 'TYPE': 'CODE', ...}}}","title":"json"},{"location":"Material/011comp/#create","text":"Sends compressive strength data to Civil NX using a PUT request. CompStrength . create ()","title":"create"},{"location":"Material/011comp/#get","text":"Fetches compressive strength data from Civil NX and returns the JSON representation. print ( CompStrength . get ())","title":"get"},{"location":"Material/011comp/#sync","text":"Retrieves Compressive Strength data from Civil NX and rebuilds the internal list. CompStrength . sync ()","title":"sync"},{"location":"Material/011comp/#delete","text":"Deletes all compressive strength data from both Python and Civil NX. CompStrength . delete ()","title":"delete"},{"location":"Material/011comp/#codal-provisions","text":"IRC Code (112)","title":"CODAL PROVISIONS"},{"location":"Material/011comp/#irc","text":"CompStrength.IRC(name, code=\"INDIA(IRC:112-2020)\", fckDelta=0, typeCement=1, typeAggregate=0, id=0) Creates IRC standard compressive strength properties.","title":"IRC"},{"location":"Material/011comp/#parameters","text":"name : Property name (required) code (default=\"INDIA(IRC:112-2020)\") : IRC code standard fckDelta (default=0) : Compressive strength difference (MPa) typeCement (default=1) : Type of cement (1=Normal, 2=Rapid) typeAggregate (default=0) : Type of aggregate (0=Normal, 1=Lightweight) id (default=0) : Manual ID assignment","title":"Parameters"},{"location":"Material/011comp/#examples","text":"# Create IRC compressive strength properties comp1 = CompStrength . IRC ( \"Comp_M25\" , \"INDIA(IRC:112-2020)\" , fckDelta = 5 , typeCement = 1 , typeAggregate = 0 , id = 1 ) comp2 = CompStrength . IRC ( \"Comp_C30\" , \"INDIA(IRC:112-2020)\" , fckDelta = 5 , typeCement = 2 , typeAggregate = 1 , id = 2 ) CompStrength . create ()","title":"Examples"},{"location":"Material/012tdlink/","text":"Time-Dependent Material Link The TDLink class links materials with their time-dependent properties (creep/shrinkage and compressive strength). Class Attributes TDLink.mats -> Dictionary of all material links. Methods json Returns a JSON representation of all Time-Dependent Material Links defined in python. print ( TDLink . json ()) # Output: # {'Assign': {'1': {'TDMT_NAME': 'CS_M25', 'TDME_NAME': 'Comp_M25'}, ...}} create Sends material links to Civil NX using a PUT request. TDLink . create () get Fetches material links from Civil NX and returns the JSON representation. print ( TDLink . get ()) sync Retrieves Time-Dependent Material Link data from Civil NX and rebuilds the internal dictionary. TDLink . sync () delete Deletes all material links from both Python and Civil NX. TDLink . delete () Examples # Link materials with their time-dependent properties link1 = TDLink ( 1 , \"CS_M25\" , \"Comp_M25\" ) # Link material ID 1 with M25 properties link2 = TDLink ( 2 , \"CS_C30\" , \"Comp_C30\" ) # Link material ID 2 with C30 properties link3 = TDLink ( 3 , \"CS_M25\" , \"\" ) # Link material ID 3 with only creep/shrinkage TDLink . create () Complete Example from midasapi import * MAPI_KEY ( \"eyJ1ciI6IklOMjQwN0ZZVDIiLCJwZyI6ImNpdmlsIiwi\" ) #Paste your MAPI Key # Create IRC creep and shrinkage properties cs1 = CreepShrinkage . IRC ( \"CS_M25\" , \"INDIA_IRC_112_2011\" , fck = 25 , notionalSize = 150 , relHumidity = 75 , ageShrinkage = 7 , typeCement = 'R' , id = 1 ) cs2 = CreepShrinkage . IRC ( \"CS_C30\" , \"INDIA_IRC_112_2011\" , fck = 30 , notionalSize = 200 , relHumidity = 70 , ageShrinkage = 3 , typeCement = 'NR' , id = 2 ) cs3 = CreepShrinkage . IRC ( \"CS_M40\" , \"INDIA_IRC_112_2011\" , fck = 40 , notionalSize = 250 , relHumidity = 65 , ageShrinkage = 28 , typeCement = 'R' , id = 3 ) # Create IRC compressive strength properties comp1 = CompStrength . IRC ( \"Comp_M25\" , \"INDIA(IRC:112-2020)\" , fckDelta = 5 , typeCement = 1 , typeAggregate = 0 , id = 1 ) comp2 = CompStrength . IRC ( \"Comp_C30\" , \"INDIA(IRC:112-2020)\" , fckDelta = 0 , typeCement = 2 , typeAggregate = 1 , id = 2 ) comp3 = CompStrength . IRC ( \"Comp_M40\" , \"INDIA(IRC:112-2020)\" , fckDelta =- 2 , typeCement = 1 , typeAggregate = 0 , id = 3 ) # Link materials with time-dependent properties # Assuming materials with IDs 1, 2, 3 exist link1 = TDLink ( 1 , \"CS_M25\" , \"Comp_M25\" ) # Link material 1 with M25 properties link2 = TDLink ( 2 , \"CS_C30\" , \"Comp_C30\" ) # Link material 2 with C30 properties link3 = TDLink ( 3 , \"CS_M40\" , \"Comp_M40\" ) # Link material 3 with M40 properties # Create all time-dependent properties in Civil NX CreepShrinkage . create () CompStrength . create () TDLink . create () print ( \"All time-dependent properties and links created successfully!\" ) # You can also create them all at once using Material.createAll() if materials exist # Material.createAll() # This creates materials, creep/shrinkage, compressive strength, and links","title":"Time Dependent Link"},{"location":"Material/012tdlink/#time-dependent-material-link","text":"The TDLink class links materials with their time-dependent properties (creep/shrinkage and compressive strength).","title":"Time-Dependent Material Link"},{"location":"Material/012tdlink/#class-attributes","text":"TDLink.mats -> Dictionary of all material links.","title":"Class Attributes"},{"location":"Material/012tdlink/#methods","text":"","title":"Methods"},{"location":"Material/012tdlink/#json","text":"Returns a JSON representation of all Time-Dependent Material Links defined in python. print ( TDLink . json ()) # Output: # {'Assign': {'1': {'TDMT_NAME': 'CS_M25', 'TDME_NAME': 'Comp_M25'}, ...}}","title":"json"},{"location":"Material/012tdlink/#create","text":"Sends material links to Civil NX using a PUT request. TDLink . create ()","title":"create"},{"location":"Material/012tdlink/#get","text":"Fetches material links from Civil NX and returns the JSON representation. print ( TDLink . get ())","title":"get"},{"location":"Material/012tdlink/#sync","text":"Retrieves Time-Dependent Material Link data from Civil NX and rebuilds the internal dictionary. TDLink . sync ()","title":"sync"},{"location":"Material/012tdlink/#delete","text":"Deletes all material links from both Python and Civil NX. TDLink . delete ()","title":"delete"},{"location":"Material/012tdlink/#examples","text":"# Link materials with their time-dependent properties link1 = TDLink ( 1 , \"CS_M25\" , \"Comp_M25\" ) # Link material ID 1 with M25 properties link2 = TDLink ( 2 , \"CS_C30\" , \"Comp_C30\" ) # Link material ID 2 with C30 properties link3 = TDLink ( 3 , \"CS_M25\" , \"\" ) # Link material ID 3 with only creep/shrinkage TDLink . create ()","title":"Examples"},{"location":"Material/012tdlink/#complete-example","text":"from midasapi import * MAPI_KEY ( \"eyJ1ciI6IklOMjQwN0ZZVDIiLCJwZyI6ImNpdmlsIiwi\" ) #Paste your MAPI Key # Create IRC creep and shrinkage properties cs1 = CreepShrinkage . IRC ( \"CS_M25\" , \"INDIA_IRC_112_2011\" , fck = 25 , notionalSize = 150 , relHumidity = 75 , ageShrinkage = 7 , typeCement = 'R' , id = 1 ) cs2 = CreepShrinkage . IRC ( \"CS_C30\" , \"INDIA_IRC_112_2011\" , fck = 30 , notionalSize = 200 , relHumidity = 70 , ageShrinkage = 3 , typeCement = 'NR' , id = 2 ) cs3 = CreepShrinkage . IRC ( \"CS_M40\" , \"INDIA_IRC_112_2011\" , fck = 40 , notionalSize = 250 , relHumidity = 65 , ageShrinkage = 28 , typeCement = 'R' , id = 3 ) # Create IRC compressive strength properties comp1 = CompStrength . IRC ( \"Comp_M25\" , \"INDIA(IRC:112-2020)\" , fckDelta = 5 , typeCement = 1 , typeAggregate = 0 , id = 1 ) comp2 = CompStrength . IRC ( \"Comp_C30\" , \"INDIA(IRC:112-2020)\" , fckDelta = 0 , typeCement = 2 , typeAggregate = 1 , id = 2 ) comp3 = CompStrength . IRC ( \"Comp_M40\" , \"INDIA(IRC:112-2020)\" , fckDelta =- 2 , typeCement = 1 , typeAggregate = 0 , id = 3 ) # Link materials with time-dependent properties # Assuming materials with IDs 1, 2, 3 exist link1 = TDLink ( 1 , \"CS_M25\" , \"Comp_M25\" ) # Link material 1 with M25 properties link2 = TDLink ( 2 , \"CS_C30\" , \"Comp_C30\" ) # Link material 2 with C30 properties link3 = TDLink ( 3 , \"CS_M40\" , \"Comp_M40\" ) # Link material 3 with M40 properties # Create all time-dependent properties in Civil NX CreepShrinkage . create () CompStrength . create () TDLink . create () print ( \"All time-dependent properties and links created successfully!\" ) # You can also create them all at once using Material.createAll() if materials exist # Material.createAll() # This creates materials, creep/shrinkage, compressive strength, and links","title":"Complete Example"},{"location":"Result/result/","text":"Result For full documentation visit mkdocs.org . Getting started mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. MAPI_Key mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. midasAPI mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Result"},{"location":"Result/result/#result","text":"For full documentation visit mkdocs.org .","title":"Result"},{"location":"Result/result/#getting-started","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Getting started"},{"location":"Result/result/#mapi_key","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"MAPI_Key"},{"location":"Result/result/#midasapi","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"midasAPI"},{"location":"Section/","text":"Section The module provides functionality to create, manage, and synchronize various types of cross-sections (User-defined, PSC, and Composite sections) in the model. Note. All the codes below assumes the initial import and MAPI Key definition. from midasapi import * MAPI_KEY ( 'eyJ1ciI6InN1bWl0QG1pZGFzaXQuY29tIiwicGciO252k81571d' ) Section The Section class provides a unified interface to create different types of cross-sections and includes nested classes for specific section types. Class Attributes Section.sect -> List of all sections. Methods create Creates all defined sections (User-defined, PSC, and Composite sections) in Civil NX. Section . create () json Returns a JSON representation of all Sections defined in python. s1 = Section . DBUSER ( \"Rect1\" , \"SB\" , [ 1.0 , 0.5 ]) s2 = Section . PSC . I ( \"PSC_I1\" , True , [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ], 2.0 ) print ( Section . json ()) # Output: # {'Assign': {1: {'SECTTYPE': 'DBUSER', 'SECT_NAME': 'Rect1', ...}, 2: {'SECTTYPE': 'PSC', 'SECT_NAME': 'PSC_I1', ...}}} get Fetches sections from Civil NX and returns the JSON representation. print ( Section . get ()) # Output # {'SECT': {'1': {'SECTTYPE': 'DBUSER', 'SECT_NAME': 'Rect1', ...}, '2': {'SECTTYPE': 'PSC', 'SECT_NAME': 'PSC_I1', ...}}} sync Retrieves Section data from Civil NX and rebuilds the internal section list. Section . sync () for sect in Section . sect : print ( f 'Section: { sect . NAME } | Type: { sect . TYPE } ' ) delete Deletes all section data from both Python and Civil NX. Section . delete () Offset Constructor To create section offset parameters, use the Offset constructor. Offset(OffsetPoint='CC', CenterLocation=0, HOffset=0, HOffOpt=0, VOffset=0, VOffOpt=0, UsrOffOpt=0) Creates offset parameters for sections with specified reference point and offset values. Parameters OffsetPoint (default='CC') : Offset reference point ('CC', 'CT', etc.) CenterLocation (default=0) : Center location parameter HOffset (default=0) : Horizontal offset value HOffOpt (default=0) : Horizontal offset option VOffset (default=0) : Vertical offset value VOffOpt (default=0) : Vertical offset option UsrOffOpt (default=0) : User offset option # Create center-center offset offset_cc = Offset . CC () # Create center-top offset offset_ct = Offset . CT () # Create custom offset custom_offset = Offset ( 'CC' , 0 , 2.5 , 0 , 1.0 , 0 , 0 ) Examples # Composite Steel I-Section Example for i in range ( 2 ): Node ( i * 10 , 0 , 0 ) Node . create () Element . Beam ( 1 , 2 ) Element . create () # Create composite steel I-section Section . Composite . SteelI_Type1 ( Name = \"Composite_Steel_I\" , Bc = 3 , tc = 0.25 , # Slab parameters Hw = 2 , B1 = 2.5 , tf1 = 0.2 , # Steel I parameters tw = 0.2 , B2 = 2.5 , tf2 = 0.2 , EsEc = 6.39 , DsDc = 3.0792 , Ps = 0.3 , Pc = 0.2 , TsTc = 1.2 , # Offset and effects Offset = Offset . CT (), useShear = True , use7Dof = False , id = 13 ) Section . create () Complete Example from midasapi import * MAPI_KEY ( \"eyJ1ciI6IklOMjQwN0ZZVDIiLCJwZyI6ImNpdmlsIiwi\" ) # Paste your MAPI Key # Create nodes and elements for i in range ( 6 ): Node ( i * 10 , 0 , 0 ) Node . create () for i in range ( 5 ): Element . Beam ( i + 1 , i + 2 ) Element . create () # Create various section types # 1. User-defined rectangular section Section . DBUSER ( \"Rect_1x0.5\" , \"SB\" , [ 1.0 , 0.5 ]) # 2. PSC 1-cell section Section . PSC . CEL12 ( Name = \"PSC Box\" , Shape = \"1CEL\" , Joint = [ 1 , 0 , 0 , 1 , 0 , 1 , 0 , 1 ], HO1 = 0.2 , HO2 = 0.3 , HO22 = 0.5 , HO3 = 2.5 , BO1 = 1.5 , BO11 = 0.5 , BO2 = 0.5 , BO3 = 2.25 , HI1 = 0.24 , HI2 = 0.26 , HI3 = 2.05 , HI31 = 0.71 , HI4 = 0.2 , HI5 = 0.25 , BI1 = 2.2 , BI11 = 0.7 , BI21 = 2.2 , BI3 = 1.932 , BI31 = 0.7 , Offset = Offset . CT (), # \"Center-Top\" selected useShear = True , # Shear deformation checkbox is selected use7Dof = False , # Warping effect (7th DOF) not checked id = 2 ) # 3. PSC I-section (symmetric) Section . PSC . I ( Name = \"PSC_I_Symmetric\" , Symm = True , Joint = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ], HL1 = 0.3 , HL2 = 0.5 , HL3 = 1.5 , HL4 = 0.3 , HL5 = 0.3 , BL1 = 0.3 , BL2 = 2 , BL4 = 2 , Offset = Offset . CT (), # \"Center-Top\" selected useShear = True , # Shear deformation checkbox is selected use7Dof = False , # Warping effect (7th DOF) not checked id = 3 ) # 4. Composite PSC I-section Section . Composite . PSCI ( Name = \"Composite_PSC_I\" , Symm = True , # Symmetrical section Joint = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ], # Joint # slab parameters Bc = 3 , tc = 0.225 , Hh = 0 , # Girder parameters HL1 = 0.15 , HL2 = 0.1 , HL3 = 1.43 , HL4 = 0.12 , HL5 = 0.3 , BL1 = 0.14 , BL2 = 0.425 , BL4 = 0.375 , # Material properties EgdEsb = 1.06922 , # Elastic modulus ratio (girder/slab) DgdDsb = 1.0 , # Density ratio Pgd = 0.2 , # Poisson's ratio (girder) Psb = 0.2 , # Poisson's ratio (slab) TgdTsb = 1.0 , # Thermal expansion coefficient ratio # Time-dependent properties MultiModulus = False , # Offset and effects Offset = Offset . CT (), useShear = True , use7Dof = False , id = 4 ) Section . create () # 5. Composite steel I-section Section . Composite . SteelI_Type1 ( Name = \"Composite_Steel_I\" , Bc = 3 , tc = 0.25 , # Slab parameters Hw = 2 , B1 = 2.5 , tf1 = 0.2 , # Steel I parameters tw = 0.2 , B2 = 2.5 , tf2 = 0.2 , EsEc = 6.39 , DsDc = 3.0792 , Ps = 0.3 , Pc = 0.2 , TsTc = 1.2 , # Offset and effects Offset = Offset . CT (), useShear = True , use7Dof = False , id = 5 ) # Create all sections in Civil NX Section . create () print ( \"Sections created successfully!\" )","title":"Section"},{"location":"Section/#section","text":"The module provides functionality to create, manage, and synchronize various types of cross-sections (User-defined, PSC, and Composite sections) in the model. Note. All the codes below assumes the initial import and MAPI Key definition. from midasapi import * MAPI_KEY ( 'eyJ1ciI6InN1bWl0QG1pZGFzaXQuY29tIiwicGciO252k81571d' )","title":"Section"},{"location":"Section/#section_1","text":"The Section class provides a unified interface to create different types of cross-sections and includes nested classes for specific section types.","title":"Section"},{"location":"Section/#class-attributes","text":"Section.sect -> List of all sections.","title":"Class Attributes"},{"location":"Section/#methods","text":"","title":"Methods"},{"location":"Section/#create","text":"Creates all defined sections (User-defined, PSC, and Composite sections) in Civil NX. Section . create ()","title":"create"},{"location":"Section/#json","text":"Returns a JSON representation of all Sections defined in python. s1 = Section . DBUSER ( \"Rect1\" , \"SB\" , [ 1.0 , 0.5 ]) s2 = Section . PSC . I ( \"PSC_I1\" , True , [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ], 2.0 ) print ( Section . json ()) # Output: # {'Assign': {1: {'SECTTYPE': 'DBUSER', 'SECT_NAME': 'Rect1', ...}, 2: {'SECTTYPE': 'PSC', 'SECT_NAME': 'PSC_I1', ...}}}","title":"json"},{"location":"Section/#get","text":"Fetches sections from Civil NX and returns the JSON representation. print ( Section . get ()) # Output # {'SECT': {'1': {'SECTTYPE': 'DBUSER', 'SECT_NAME': 'Rect1', ...}, '2': {'SECTTYPE': 'PSC', 'SECT_NAME': 'PSC_I1', ...}}}","title":"get"},{"location":"Section/#sync","text":"Retrieves Section data from Civil NX and rebuilds the internal section list. Section . sync () for sect in Section . sect : print ( f 'Section: { sect . NAME } | Type: { sect . TYPE } ' )","title":"sync"},{"location":"Section/#delete","text":"Deletes all section data from both Python and Civil NX. Section . delete ()","title":"delete"},{"location":"Section/#offset","text":"","title":"Offset"},{"location":"Section/#constructor","text":"To create section offset parameters, use the Offset constructor. Offset(OffsetPoint='CC', CenterLocation=0, HOffset=0, HOffOpt=0, VOffset=0, VOffOpt=0, UsrOffOpt=0) Creates offset parameters for sections with specified reference point and offset values.","title":"Constructor"},{"location":"Section/#parameters","text":"OffsetPoint (default='CC') : Offset reference point ('CC', 'CT', etc.) CenterLocation (default=0) : Center location parameter HOffset (default=0) : Horizontal offset value HOffOpt (default=0) : Horizontal offset option VOffset (default=0) : Vertical offset value VOffOpt (default=0) : Vertical offset option UsrOffOpt (default=0) : User offset option # Create center-center offset offset_cc = Offset . CC () # Create center-top offset offset_ct = Offset . CT () # Create custom offset custom_offset = Offset ( 'CC' , 0 , 2.5 , 0 , 1.0 , 0 , 0 )","title":"Parameters"},{"location":"Section/#examples","text":"# Composite Steel I-Section Example for i in range ( 2 ): Node ( i * 10 , 0 , 0 ) Node . create () Element . Beam ( 1 , 2 ) Element . create () # Create composite steel I-section Section . Composite . SteelI_Type1 ( Name = \"Composite_Steel_I\" , Bc = 3 , tc = 0.25 , # Slab parameters Hw = 2 , B1 = 2.5 , tf1 = 0.2 , # Steel I parameters tw = 0.2 , B2 = 2.5 , tf2 = 0.2 , EsEc = 6.39 , DsDc = 3.0792 , Ps = 0.3 , Pc = 0.2 , TsTc = 1.2 , # Offset and effects Offset = Offset . CT (), useShear = True , use7Dof = False , id = 13 ) Section . create ()","title":"Examples"},{"location":"Section/#complete-example","text":"from midasapi import * MAPI_KEY ( \"eyJ1ciI6IklOMjQwN0ZZVDIiLCJwZyI6ImNpdmlsIiwi\" ) # Paste your MAPI Key # Create nodes and elements for i in range ( 6 ): Node ( i * 10 , 0 , 0 ) Node . create () for i in range ( 5 ): Element . Beam ( i + 1 , i + 2 ) Element . create () # Create various section types # 1. User-defined rectangular section Section . DBUSER ( \"Rect_1x0.5\" , \"SB\" , [ 1.0 , 0.5 ]) # 2. PSC 1-cell section Section . PSC . CEL12 ( Name = \"PSC Box\" , Shape = \"1CEL\" , Joint = [ 1 , 0 , 0 , 1 , 0 , 1 , 0 , 1 ], HO1 = 0.2 , HO2 = 0.3 , HO22 = 0.5 , HO3 = 2.5 , BO1 = 1.5 , BO11 = 0.5 , BO2 = 0.5 , BO3 = 2.25 , HI1 = 0.24 , HI2 = 0.26 , HI3 = 2.05 , HI31 = 0.71 , HI4 = 0.2 , HI5 = 0.25 , BI1 = 2.2 , BI11 = 0.7 , BI21 = 2.2 , BI3 = 1.932 , BI31 = 0.7 , Offset = Offset . CT (), # \"Center-Top\" selected useShear = True , # Shear deformation checkbox is selected use7Dof = False , # Warping effect (7th DOF) not checked id = 2 ) # 3. PSC I-section (symmetric) Section . PSC . I ( Name = \"PSC_I_Symmetric\" , Symm = True , Joint = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ], HL1 = 0.3 , HL2 = 0.5 , HL3 = 1.5 , HL4 = 0.3 , HL5 = 0.3 , BL1 = 0.3 , BL2 = 2 , BL4 = 2 , Offset = Offset . CT (), # \"Center-Top\" selected useShear = True , # Shear deformation checkbox is selected use7Dof = False , # Warping effect (7th DOF) not checked id = 3 ) # 4. Composite PSC I-section Section . Composite . PSCI ( Name = \"Composite_PSC_I\" , Symm = True , # Symmetrical section Joint = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ], # Joint # slab parameters Bc = 3 , tc = 0.225 , Hh = 0 , # Girder parameters HL1 = 0.15 , HL2 = 0.1 , HL3 = 1.43 , HL4 = 0.12 , HL5 = 0.3 , BL1 = 0.14 , BL2 = 0.425 , BL4 = 0.375 , # Material properties EgdEsb = 1.06922 , # Elastic modulus ratio (girder/slab) DgdDsb = 1.0 , # Density ratio Pgd = 0.2 , # Poisson's ratio (girder) Psb = 0.2 , # Poisson's ratio (slab) TgdTsb = 1.0 , # Thermal expansion coefficient ratio # Time-dependent properties MultiModulus = False , # Offset and effects Offset = Offset . CT (), useShear = True , use7Dof = False , id = 4 ) Section . create () # 5. Composite steel I-section Section . Composite . SteelI_Type1 ( Name = \"Composite_Steel_I\" , Bc = 3 , tc = 0.25 , # Slab parameters Hw = 2 , B1 = 2.5 , tf1 = 0.2 , # Steel I parameters tw = 0.2 , B2 = 2.5 , tf2 = 0.2 , EsEc = 6.39 , DsDc = 3.0792 , Ps = 0.3 , Pc = 0.2 , TsTc = 1.2 , # Offset and effects Offset = Offset . CT (), useShear = True , use7Dof = False , id = 5 ) # Create all sections in Civil NX Section . create () print ( \"Sections created successfully!\" )","title":"Complete Example"},{"location":"Section/01_user/","text":"Standard Section A nested class within Section used to create user-defined standard sections. Some common user defined section's Shape notation is givn below: NAME SHAPE DIMENSION VALUE Angle \"L\" [H, B, tw, tf] Channel \"C\" [H, B1, tw, tf1, B2, tf2, r1, r2] H/I-Section \"H\" [H, B1, tw, tf1, B2, tf2, r1, r2] T-Section \"T\" [H, B, tw, tf] Box \"B\" [H, B, tw, tf1, C, tf2] Pipe \"P\" [D, tw] Double Angle \"2L\" [H, B, tw, tf, C] Double Channel \"2C\" [H, B, tw, tf, C] Solid Rectangle \"SB\" [H, B] Solid Round \"SR\" [D] Details of all available sections can be found here . Constructor Section.DBUSER(Name='', Shape='', parameters:list=[], Offset:Offset=Offset.CC(), useShear=True, use7Dof=False, id:int=0) Creates user-defined sections with specified shape and parameters. Parameters Name : Section name Shape : Section shape code ('SB', 'SR', etc.) parameters : List of section parameters Offset (default=Offset.CC()) : Section offset parameters useShear (default=True) : Enable shear deformation use7Dof (default=False) : Enable warping (7DOF) id (default=0) : Section ID (auto-assigned if 0) Examples # Rectangular Section Example for i in range ( 2 ): Node ( i * 10 , 0 , 0 ) Node . create () Element . Beam ( 1 , 2 ) Element . create () # Create rectangular section Section . DBUSER ( \"Rect_1x0.5\" , \"SB\" , [ 1.0 , 0.5 ]) Section . create () # Circular Section with Custom Offset Example for i in range ( 2 ): Node ( i * 10 , 0 , 0 ) Node . create () Element . Beam ( 1 , 2 ) Element . create () # Create circular section with center-top offset Section . DBUSER ( \"Circle_D1\" , \"SR\" , [ 1.0 ], Offset . CT (), True , False , 5 ) Section . create ()","title":"\u200e \u200e \u200e Standard Section"},{"location":"Section/01_user/#standard-section","text":"A nested class within Section used to create user-defined standard sections. Some common user defined section's Shape notation is givn below: NAME SHAPE DIMENSION VALUE Angle \"L\" [H, B, tw, tf] Channel \"C\" [H, B1, tw, tf1, B2, tf2, r1, r2] H/I-Section \"H\" [H, B1, tw, tf1, B2, tf2, r1, r2] T-Section \"T\" [H, B, tw, tf] Box \"B\" [H, B, tw, tf1, C, tf2] Pipe \"P\" [D, tw] Double Angle \"2L\" [H, B, tw, tf, C] Double Channel \"2C\" [H, B, tw, tf, C] Solid Rectangle \"SB\" [H, B] Solid Round \"SR\" [D] Details of all available sections can be found here .","title":"Standard Section"},{"location":"Section/01_user/#constructor","text":"Section.DBUSER(Name='', Shape='', parameters:list=[], Offset:Offset=Offset.CC(), useShear=True, use7Dof=False, id:int=0) Creates user-defined sections with specified shape and parameters.","title":"Constructor"},{"location":"Section/01_user/#parameters","text":"Name : Section name Shape : Section shape code ('SB', 'SR', etc.) parameters : List of section parameters Offset (default=Offset.CC()) : Section offset parameters useShear (default=True) : Enable shear deformation use7Dof (default=False) : Enable warping (7DOF) id (default=0) : Section ID (auto-assigned if 0)","title":"Parameters"},{"location":"Section/01_user/#examples","text":"# Rectangular Section Example for i in range ( 2 ): Node ( i * 10 , 0 , 0 ) Node . create () Element . Beam ( 1 , 2 ) Element . create () # Create rectangular section Section . DBUSER ( \"Rect_1x0.5\" , \"SB\" , [ 1.0 , 0.5 ]) Section . create () # Circular Section with Custom Offset Example for i in range ( 2 ): Node ( i * 10 , 0 , 0 ) Node . create () Element . Beam ( 1 , 2 ) Element . create () # Create circular section with center-top offset Section . DBUSER ( \"Circle_D1\" , \"SR\" , [ 1.0 ], Offset . CT (), True , False , 5 ) Section . create ()","title":"Examples"},{"location":"Section/02_psc/","text":"PSC Sections A nested class within Section used to create Prestressed Concrete sections. PSC Box Section (1-Cell, 2-Cell) Constructor Section.PSC.CEL12(Name='', Shape='1CEL', Joint=[0,0,0,0,0,0,0,0], HO1=0, HO2=0, HO21=0, HO22=0, HO3=0, HO31=0, BO1=0, BO11=0, BO12=0, BO2=0, BO21=0, BO3=0, HI1=0, HI2=0, HI21=0, HI22=0, HI3=0, HI31=0, HI4=0, HI41=0, HI42=0, HI5=0, BI1=0, BI11=0, BI12=0, BI21=0, BI3=0, BI31=0, BI32=0, BI4=0, Offset:Offset=Offset.CC(), useShear=True, use7Dof=False, id:int=0) Creates PSC 1-cell or 2-cell box sections. Parameters Name : Section name Shape (default='1CEL') : Section shape ('1CEL' or '2CEL') Joint : List of 8 joint connectivity values [JO1, JO2, JO3, JI1, JI2, JI3, JI4, JI5] HO1, HO2, HO21, HO22, HO3, HO31 : Outer cell height parameters BO1, BO11, BO12, BO2, BO21, BO3 : Outer cell width parameters HI1-HI5, HI21, HI22, HI31, HI41, HI42 : Inner cell height parameters BI1, BI11, BI12, BI21, BI3, BI31, BI32, BI4 : Inner cell width parameters Offset (default=Offset.CC()) : Section offset parameters useShear (default=True) : Enable shear deformation use7Dof (default=False) : Enable warping effect id (default=0) : Section ID Examples PSC Cell Sections (1-Cell, 2-Cell) Section # PSC Example for i in range ( 2 ): Node ( i * 10 , 0 , 0 ) Node . create () Element . Beam ( 1 , 2 ) Element . create () # Create PSC Box Section Section . PSC . CEL12 ( Name = \"PSC Box\" , Shape = \"1CEL\" , Joint = [ 1 , 0 , 0 , 1 , 0 , 1 , 0 , 1 ], HO1 = 0.2 , HO2 = 0.3 , HO22 = 0.5 , HO3 = 2.5 , BO1 = 1.5 , BO11 = 0.5 , BO2 = 0.5 , BO3 = 2.25 , HI1 = 0.24 , HI2 = 0.26 , HI3 = 2.05 , HI31 = 0.71 , HI4 = 0.2 , HI5 = 0.25 , BI1 = 2.2 , BI11 = 0.7 , BI21 = 2.2 , BI3 = 1.932 , BI31 = 0.7 , Offset = Offset . CT (), # \"Center-Top\" selected useShear = True , # Shear deformation checkbox is selected use7Dof = False , # Warping effect (7th DOF) not checked id = 1 ) Section . create () PSC I-Section Constructor Section.PSC.I(Name='', Symm=True, Joint=[0,0,0,0,0,0,0,0,0], H1=0, HL1=0, HL2=0, HL21=0, HL22=0, HL3=0, HL4=0, HL41=0, HL42=0, HL5=0, BL1=0, BL2=0, BL21=0, BL22=0, BL4=0, BL41=0, BL42=0, HR1=0, HR2=0, HR21=0, HR22=0, HR3=0, HR4=0, HR41=0, HR42=0, HR5=0, BR1=0, BR2=0, BR21=0, BR22=0, BR4=0, BR41=0, BR42=0, Offset:Offset=Offset.CC(), useShear=True, use7Dof=False, id:int=0) Creates PSC I-sections with symmetric or asymmetric flanges. Parameters Name : Section name Symm (default=True) : Symmetric section flag Joint : List of 9 joint connectivity values H1 : Web height HL1-HL5, HL21, HL22, HL41, HL42 : Left flange parameters BL1-BL4, BL21, BL22, BL41, BL42 : Left flange width parameters HR1-HR5, HR21, HR22, HR41, HR42 : Right flange parameters (used when Symm=False) BR1-BR4, BR21, BR22, BR41, BR42 : Right flange width parameters (used when Symm=False) Offset (default=Offset.CC()) : Section offset parameters useShear (default=True) : Enable shear deformation use7Dof (default=False) : Enable warping effect id (default=0) : Section ID Examples Symmetric PSC I-Section # Symmetric PSC I-Section Example for i in range ( 2 ): Node ( i * 10 , 0 , 0 ) Node . create () Element . Beam ( 1 , 2 ) Element . create () # Create Symmetric PSC I-section Section . PSC . I ( Name = \"PSC_I_Symmetric\" , Symm = True , Joint = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ], HL1 = 0.3 , HL2 = 0.5 , HL3 = 1.5 , HL4 = 0.3 , HL5 = 0.3 , BL1 = 0.3 , BL2 = 2 , BL4 = 2 , Offset = Offset . CT (), # \"Center-Top\" selected useShear = True , # Shear deformation checkbox is selected use7Dof = False , # Warping effect (7th DOF) not checked id = 15 ) Section . create ()","title":"\u200e \u200e \u200e PSC Section"},{"location":"Section/02_psc/#psc-sections","text":"A nested class within Section used to create Prestressed Concrete sections.","title":"PSC Sections"},{"location":"Section/02_psc/#psc-box-section-1-cell-2-cell","text":"","title":"PSC Box Section (1-Cell, 2-Cell)"},{"location":"Section/02_psc/#constructor","text":"Section.PSC.CEL12(Name='', Shape='1CEL', Joint=[0,0,0,0,0,0,0,0], HO1=0, HO2=0, HO21=0, HO22=0, HO3=0, HO31=0, BO1=0, BO11=0, BO12=0, BO2=0, BO21=0, BO3=0, HI1=0, HI2=0, HI21=0, HI22=0, HI3=0, HI31=0, HI4=0, HI41=0, HI42=0, HI5=0, BI1=0, BI11=0, BI12=0, BI21=0, BI3=0, BI31=0, BI32=0, BI4=0, Offset:Offset=Offset.CC(), useShear=True, use7Dof=False, id:int=0) Creates PSC 1-cell or 2-cell box sections.","title":"Constructor"},{"location":"Section/02_psc/#parameters","text":"Name : Section name Shape (default='1CEL') : Section shape ('1CEL' or '2CEL') Joint : List of 8 joint connectivity values [JO1, JO2, JO3, JI1, JI2, JI3, JI4, JI5] HO1, HO2, HO21, HO22, HO3, HO31 : Outer cell height parameters BO1, BO11, BO12, BO2, BO21, BO3 : Outer cell width parameters HI1-HI5, HI21, HI22, HI31, HI41, HI42 : Inner cell height parameters BI1, BI11, BI12, BI21, BI3, BI31, BI32, BI4 : Inner cell width parameters Offset (default=Offset.CC()) : Section offset parameters useShear (default=True) : Enable shear deformation use7Dof (default=False) : Enable warping effect id (default=0) : Section ID","title":"Parameters"},{"location":"Section/02_psc/#examples","text":"","title":"Examples"},{"location":"Section/02_psc/#psc-cell-sections-1-cell-2-cell-section","text":"# PSC Example for i in range ( 2 ): Node ( i * 10 , 0 , 0 ) Node . create () Element . Beam ( 1 , 2 ) Element . create () # Create PSC Box Section Section . PSC . CEL12 ( Name = \"PSC Box\" , Shape = \"1CEL\" , Joint = [ 1 , 0 , 0 , 1 , 0 , 1 , 0 , 1 ], HO1 = 0.2 , HO2 = 0.3 , HO22 = 0.5 , HO3 = 2.5 , BO1 = 1.5 , BO11 = 0.5 , BO2 = 0.5 , BO3 = 2.25 , HI1 = 0.24 , HI2 = 0.26 , HI3 = 2.05 , HI31 = 0.71 , HI4 = 0.2 , HI5 = 0.25 , BI1 = 2.2 , BI11 = 0.7 , BI21 = 2.2 , BI3 = 1.932 , BI31 = 0.7 , Offset = Offset . CT (), # \"Center-Top\" selected useShear = True , # Shear deformation checkbox is selected use7Dof = False , # Warping effect (7th DOF) not checked id = 1 ) Section . create ()","title":"PSC Cell Sections (1-Cell, 2-Cell) Section"},{"location":"Section/02_psc/#psc-i-section","text":"","title":"PSC I-Section"},{"location":"Section/02_psc/#constructor_1","text":"Section.PSC.I(Name='', Symm=True, Joint=[0,0,0,0,0,0,0,0,0], H1=0, HL1=0, HL2=0, HL21=0, HL22=0, HL3=0, HL4=0, HL41=0, HL42=0, HL5=0, BL1=0, BL2=0, BL21=0, BL22=0, BL4=0, BL41=0, BL42=0, HR1=0, HR2=0, HR21=0, HR22=0, HR3=0, HR4=0, HR41=0, HR42=0, HR5=0, BR1=0, BR2=0, BR21=0, BR22=0, BR4=0, BR41=0, BR42=0, Offset:Offset=Offset.CC(), useShear=True, use7Dof=False, id:int=0) Creates PSC I-sections with symmetric or asymmetric flanges.","title":"Constructor"},{"location":"Section/02_psc/#parameters_1","text":"Name : Section name Symm (default=True) : Symmetric section flag Joint : List of 9 joint connectivity values H1 : Web height HL1-HL5, HL21, HL22, HL41, HL42 : Left flange parameters BL1-BL4, BL21, BL22, BL41, BL42 : Left flange width parameters HR1-HR5, HR21, HR22, HR41, HR42 : Right flange parameters (used when Symm=False) BR1-BR4, BR21, BR22, BR41, BR42 : Right flange width parameters (used when Symm=False) Offset (default=Offset.CC()) : Section offset parameters useShear (default=True) : Enable shear deformation use7Dof (default=False) : Enable warping effect id (default=0) : Section ID","title":"Parameters"},{"location":"Section/02_psc/#examples_1","text":"","title":"Examples"},{"location":"Section/02_psc/#symmetric-psc-i-section","text":"# Symmetric PSC I-Section Example for i in range ( 2 ): Node ( i * 10 , 0 , 0 ) Node . create () Element . Beam ( 1 , 2 ) Element . create () # Create Symmetric PSC I-section Section . PSC . I ( Name = \"PSC_I_Symmetric\" , Symm = True , Joint = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ], HL1 = 0.3 , HL2 = 0.5 , HL3 = 1.5 , HL4 = 0.3 , HL5 = 0.3 , BL1 = 0.3 , BL2 = 2 , BL4 = 2 , Offset = Offset . CT (), # \"Center-Top\" selected useShear = True , # Shear deformation checkbox is selected use7Dof = False , # Warping effect (7th DOF) not checked id = 15 ) Section . create ()","title":"Symmetric PSC I-Section"},{"location":"Section/03_composite/","text":"Composite Section A nested class within Section used to create composite sections. Composite PSC I-Section Constructor Section.Composite.PSCI(Name='', Symm=True, Joint=[0,0,0,0,0,0,0,0,0], Bc=0, tc=0, Hh=0, H1=0, HL1=0, HL2=0, HL21=0, HL22=0, HL3=0, HL4=0, HL41=0, HL42=0, HL5=0, BL1=0, BL2=0, BL21=0, BL22=0, BL4=0, BL41=0, BL42=0, HR1=0, HR2=0, HR21=0, HR22=0, HR3=0, HR4=0, HR41=0, HR42=0, HR5=0, BR1=0, BR2=0, BR21=0, BR22=0, BR4=0, BR41=0, BR42=0, EgdEsb=0, DgdDsb=0, Pgd=0, Psb=0, TgdTsb=0, MultiModulus=False, CreepEratio=0, ShrinkEratio=0, Offset:Offset=Offset.CC(), useShear=True, use7Dof=False, id:int=0) Creates composite PSC I-sections with concrete slab. Parameters Name : Section name Symm (default=True) : Symmetric section flag Joint : List of joint connectivity values Bc, tc, Hh : Slab parameters (width, thickness, haunch height) H1 : Web height HL1-HL5, BL1-BL4 : Left flange parameters HR1-HR5, BR1-BR4 : Right flange parameters EgdEsb : Modular ratio (Egirder/Eslab) DgdDsb : Density ratio (Dgirder/Dslab) Pgd, Psb : Poisson's ratios for girder and slab TgdTsb : Thermal coefficient ratio MultiModulus (default=False) : Enable multi-modulus analysis CreepEratio, ShrinkEratio : Creep and shrinkage ratios Offset (default=Offset.CC()) : Section offset parameters useShear (default=True) : Enable shear deformation use7Dof (default=False) : Enable warping effect id (default=0) : Section ID Examples # Composite PSC I-Section Example for i in range ( 2 ): Node ( i * 10 , 0 , 0 ) Node . create () Element . Beam ( 1 , 2 ) Element . create () # Create composite PSC I-section Section . Composite . PSCI ( Name = \"Composite_PSC_I\" , Symm = True , # Symmetrical section Joint = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ], # Joint # slab parameters Bc = 3 , tc = 0.225 , Hh = 0 , # Girder parameters HL1 = 0.15 , HL2 = 0.1 , HL3 = 1.43 , HL4 = 0.12 , HL5 = 0.3 , BL1 = 0.14 , BL2 = 0.425 , BL4 = 0.375 , # Material properties EgdEsb = 1.06922 , # Elastic modulus ratio (girder/slab) DgdDsb = 1.0 , # Density ratio Pgd = 0.2 , # Poisson's ratio (girder) Psb = 0.2 , # Poisson's ratio (slab) TgdTsb = 1.0 , # Thermal expansion coefficient ratio # Time-dependent properties MultiModulus = False , # Offset and effects Offset = Offset . CT (), useShear = True , use7Dof = False , id = 10 ) Section . create () Composite Steel I-Section Constructor Section.Composite.SteelI_Type1(Name='', Bc=0, tc=0, Hh=0, Hw=0, B1=0, tf1=0, tw=0, B2=0, tf2=0, EsEc=0, DsDc=0, Ps=0, Pc=0, TsTc=0, MultiModulus=False, CreepEratio=0, ShrinkEratio=0, Offset:Offset=Offset.CC(), useShear=True, use7Dof=False, id:int=0) Creates composite steel I-sections with concrete slab. Parameters Name : Section name Bc, tc, Hh : Slab parameters (width, thickness, haunch height) Hw : Web height B1, tf1 : Top flange width and thickness tw : Web thickness B2, tf2 : Bottom flange width and thickness EsEc : Modular ratio (Esteel/Econcrete) DsDc : Density ratio (Dsteel/Dconcrete) Ps, Pc : Poisson's ratios for steel and concrete TsTc : Thermal coefficient ratio MultiModulus (default=False) : Enable multi-modulus analysis CreepEratio, ShrinkEratio : Creep and shrinkage ratios Offset (default=Offset.CC()) : Section offset parameters useShear (default=True) : Enable shear deformation use7Dof (default=False) : Enable warping effect id (default=0) : Section ID Examples # Composite Steel I-Section Example for i in range ( 2 ): Node ( i * 10 , 0 , 0 ) Node . create () Element . Beam ( 1 , 2 ) Element . create () # Create composite steel I-section Section . Composite . SteelI_Type1 ( Name = \"Composite_Steel_I\" , Bc = 3 , tc = 0.25 , # Slab parameters Hw = 2 , B1 = 2.5 , tf1 = 0.2 , # Steel I parameters tw = 0.2 , B2 = 2.5 , tf2 = 0.2 , EsEc = 6.39 , DsDc = 3.0792 , Ps = 0.3 , Pc = 0.2 , TsTc = 1.2 , # Offset and effects Offset = Offset . CT (), useShear = True , use7Dof = False , id = 13 ) Section . create ()","title":"\u200e \u200e \u200e Composite Section"},{"location":"Section/03_composite/#composite-section","text":"A nested class within Section used to create composite sections.","title":"Composite Section"},{"location":"Section/03_composite/#composite-psc-i-section","text":"","title":"Composite PSC I-Section"},{"location":"Section/03_composite/#constructor","text":"Section.Composite.PSCI(Name='', Symm=True, Joint=[0,0,0,0,0,0,0,0,0], Bc=0, tc=0, Hh=0, H1=0, HL1=0, HL2=0, HL21=0, HL22=0, HL3=0, HL4=0, HL41=0, HL42=0, HL5=0, BL1=0, BL2=0, BL21=0, BL22=0, BL4=0, BL41=0, BL42=0, HR1=0, HR2=0, HR21=0, HR22=0, HR3=0, HR4=0, HR41=0, HR42=0, HR5=0, BR1=0, BR2=0, BR21=0, BR22=0, BR4=0, BR41=0, BR42=0, EgdEsb=0, DgdDsb=0, Pgd=0, Psb=0, TgdTsb=0, MultiModulus=False, CreepEratio=0, ShrinkEratio=0, Offset:Offset=Offset.CC(), useShear=True, use7Dof=False, id:int=0) Creates composite PSC I-sections with concrete slab.","title":"Constructor"},{"location":"Section/03_composite/#parameters","text":"Name : Section name Symm (default=True) : Symmetric section flag Joint : List of joint connectivity values Bc, tc, Hh : Slab parameters (width, thickness, haunch height) H1 : Web height HL1-HL5, BL1-BL4 : Left flange parameters HR1-HR5, BR1-BR4 : Right flange parameters EgdEsb : Modular ratio (Egirder/Eslab) DgdDsb : Density ratio (Dgirder/Dslab) Pgd, Psb : Poisson's ratios for girder and slab TgdTsb : Thermal coefficient ratio MultiModulus (default=False) : Enable multi-modulus analysis CreepEratio, ShrinkEratio : Creep and shrinkage ratios Offset (default=Offset.CC()) : Section offset parameters useShear (default=True) : Enable shear deformation use7Dof (default=False) : Enable warping effect id (default=0) : Section ID","title":"Parameters"},{"location":"Section/03_composite/#examples","text":"# Composite PSC I-Section Example for i in range ( 2 ): Node ( i * 10 , 0 , 0 ) Node . create () Element . Beam ( 1 , 2 ) Element . create () # Create composite PSC I-section Section . Composite . PSCI ( Name = \"Composite_PSC_I\" , Symm = True , # Symmetrical section Joint = [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 ], # Joint # slab parameters Bc = 3 , tc = 0.225 , Hh = 0 , # Girder parameters HL1 = 0.15 , HL2 = 0.1 , HL3 = 1.43 , HL4 = 0.12 , HL5 = 0.3 , BL1 = 0.14 , BL2 = 0.425 , BL4 = 0.375 , # Material properties EgdEsb = 1.06922 , # Elastic modulus ratio (girder/slab) DgdDsb = 1.0 , # Density ratio Pgd = 0.2 , # Poisson's ratio (girder) Psb = 0.2 , # Poisson's ratio (slab) TgdTsb = 1.0 , # Thermal expansion coefficient ratio # Time-dependent properties MultiModulus = False , # Offset and effects Offset = Offset . CT (), useShear = True , use7Dof = False , id = 10 ) Section . create ()","title":"Examples"},{"location":"Section/03_composite/#composite-steel-i-section","text":"","title":"Composite Steel I-Section"},{"location":"Section/03_composite/#constructor_1","text":"Section.Composite.SteelI_Type1(Name='', Bc=0, tc=0, Hh=0, Hw=0, B1=0, tf1=0, tw=0, B2=0, tf2=0, EsEc=0, DsDc=0, Ps=0, Pc=0, TsTc=0, MultiModulus=False, CreepEratio=0, ShrinkEratio=0, Offset:Offset=Offset.CC(), useShear=True, use7Dof=False, id:int=0) Creates composite steel I-sections with concrete slab.","title":"Constructor"},{"location":"Section/03_composite/#parameters_1","text":"Name : Section name Bc, tc, Hh : Slab parameters (width, thickness, haunch height) Hw : Web height B1, tf1 : Top flange width and thickness tw : Web thickness B2, tf2 : Bottom flange width and thickness EsEc : Modular ratio (Esteel/Econcrete) DsDc : Density ratio (Dsteel/Dconcrete) Ps, Pc : Poisson's ratios for steel and concrete TsTc : Thermal coefficient ratio MultiModulus (default=False) : Enable multi-modulus analysis CreepEratio, ShrinkEratio : Creep and shrinkage ratios Offset (default=Offset.CC()) : Section offset parameters useShear (default=True) : Enable shear deformation use7Dof (default=False) : Enable warping effect id (default=0) : Section ID","title":"Parameters"},{"location":"Section/03_composite/#examples_1","text":"# Composite Steel I-Section Example for i in range ( 2 ): Node ( i * 10 , 0 , 0 ) Node . create () Element . Beam ( 1 , 2 ) Element . create () # Create composite steel I-section Section . Composite . SteelI_Type1 ( Name = \"Composite_Steel_I\" , Bc = 3 , tc = 0.25 , # Slab parameters Hw = 2 , B1 = 2.5 , tf1 = 0.2 , # Steel I parameters tw = 0.2 , B2 = 2.5 , tf2 = 0.2 , EsEc = 6.39 , DsDc = 3.0792 , Ps = 0.3 , Pc = 0.2 , TsTc = 1.2 , # Offset and effects Offset = Offset . CT (), useShear = True , use7Dof = False , id = 13 ) Section . create ()","title":"Examples"},{"location":"Section/09_thickness/","text":"Thickness The Thickness class is used to manage and synchronize thickness data with MIDAS Civil NX. Constructor Thickness(thick=0.0,thick_out=-1,offset=0,off_type='rat',name=\"\",id=0) Creates thickness with specified parameters. Parameters thick (float): Thickness value thick_out (float): Optional Out-of plane thickness value. If set to -1, it will default to the input thickness. offset (float): Offset value. off_type (str): Type of offset. 'rat' for ratio, 'val' for value. name (str): Optional name of the Thickness. id (int): Thickness ID Class Attributes Thickness.thick -> List of all thickness defined. Object Attributes ID (int): Thickness ID. NAME (str): Thickness name. TYPE (str): Default: \"VALUE\". T_IN (float): In Plane thickness. T_OUT (float): Out-of Plane thickness. bINOUT (bool): True if T_IN and T_OUT differ; False if same. OFFSET (float): Offset amount. OFF_TYPE (int): Offset type code (0: none, 1: ratio, 2: absolute). Methods create Create all thickness section in Civil NX . Thickness . create () json Returns a JSON representation of all Thickness defined in python. print ( Thickness . json ()) # Output: get Fetches thickness from Civil NX and returns the JSON representation. print ( Thickness . get ()) # Output sync Retrieves Thickness data from Civil NX and rebuilds the internal thickness list. Thickness . sync () for thick in Thickness . thick : print ( f 'ID: { thick . ID } | Thickness: { thick . T_IN } ' ) delete Deletes all Thickness data from both Python and Civil NX. Thickness . delete () Examples # Rectangular Section Example for i in range ( 5 ): Thickness ( i + 0.1 ) Thickness . create ()","title":"Thickness"},{"location":"Section/09_thickness/#thickness","text":"The Thickness class is used to manage and synchronize thickness data with MIDAS Civil NX.","title":"Thickness"},{"location":"Section/09_thickness/#constructor","text":"Thickness(thick=0.0,thick_out=-1,offset=0,off_type='rat',name=\"\",id=0) Creates thickness with specified parameters.","title":"Constructor"},{"location":"Section/09_thickness/#parameters","text":"thick (float): Thickness value thick_out (float): Optional Out-of plane thickness value. If set to -1, it will default to the input thickness. offset (float): Offset value. off_type (str): Type of offset. 'rat' for ratio, 'val' for value. name (str): Optional name of the Thickness. id (int): Thickness ID","title":"Parameters"},{"location":"Section/09_thickness/#class-attributes","text":"Thickness.thick -> List of all thickness defined.","title":"Class Attributes"},{"location":"Section/09_thickness/#object-attributes","text":"ID (int): Thickness ID. NAME (str): Thickness name. TYPE (str): Default: \"VALUE\". T_IN (float): In Plane thickness. T_OUT (float): Out-of Plane thickness. bINOUT (bool): True if T_IN and T_OUT differ; False if same. OFFSET (float): Offset amount. OFF_TYPE (int): Offset type code (0: none, 1: ratio, 2: absolute).","title":"Object Attributes"},{"location":"Section/09_thickness/#methods","text":"","title":"Methods"},{"location":"Section/09_thickness/#create","text":"Create all thickness section in Civil NX . Thickness . create ()","title":"create"},{"location":"Section/09_thickness/#json","text":"Returns a JSON representation of all Thickness defined in python. print ( Thickness . json ()) # Output:","title":"json"},{"location":"Section/09_thickness/#get","text":"Fetches thickness from Civil NX and returns the JSON representation. print ( Thickness . get ()) # Output","title":"get"},{"location":"Section/09_thickness/#sync","text":"Retrieves Thickness data from Civil NX and rebuilds the internal thickness list. Thickness . sync () for thick in Thickness . thick : print ( f 'ID: { thick . ID } | Thickness: { thick . T_IN } ' )","title":"sync"},{"location":"Section/09_thickness/#delete","text":"Deletes all Thickness data from both Python and Civil NX. Thickness . delete ()","title":"delete"},{"location":"Section/09_thickness/#examples","text":"# Rectangular Section Example for i in range ( 5 ): Thickness ( i + 0.1 ) Thickness . create ()","title":"Examples"}]}